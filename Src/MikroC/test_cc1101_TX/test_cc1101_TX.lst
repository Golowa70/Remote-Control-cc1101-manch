;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 08.08.2015 19:48:51
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x296A      	GOTO       362
_interrupt:
;test_cc1101_TX.c,338 :: 		void interrupt (void){
;test_cc1101_TX.c,339 :: 		if(INTCON.IOCIE & INTCON.IOCIF){                      //если прерывание по изменению...просыпаемся
0x0004	0x3180      	MOVLP      0
0x0005	0x1D8B      	BTFSS      INTCON, 3
0x0006	0x280B      	GOTO       L__interrupt60
0x0007	0x1C0B      	BTFSS      INTCON, 0
0x0008	0x280B      	GOTO       L__interrupt60
0x0009	0x1403      	BSF        STATUS, 0
0x000A	0x280C      	GOTO       L__interrupt61
L__interrupt60:
0x000B	0x1003      	BCF        STATUS, 0
L__interrupt61:
0x000C	0x1C03      	BTFSS      STATUS, 0
0x000D	0x2817      	GOTO       L_interrupt29
;test_cc1101_TX.c,340 :: 		INTCON.IOCIF=0;                                    //сбросим флаги
0x000E	0x100B      	BCF        INTCON, 0
;test_cc1101_TX.c,341 :: 		IOCAF.IOCAF0=0;
0x000F	0x0027      	MOVLB      7
0x0010	0x1013      	BCF        IOCAF, 0
;test_cc1101_TX.c,342 :: 		IOCAF.IOCAF1=0;
0x0011	0x1093      	BCF        IOCAF, 1
;test_cc1101_TX.c,343 :: 		IOCAF.IOCAF2=0;
0x0012	0x1113      	BCF        IOCAF, 2
;test_cc1101_TX.c,344 :: 		IOCAF.IOCAF4=0;
0x0013	0x1213      	BCF        IOCAF, 4
;test_cc1101_TX.c,345 :: 		IOCAF.IOCAF5=0;
0x0014	0x1293      	BCF        IOCAF, 5
;test_cc1101_TX.c,348 :: 		INTCON=0;                                       //глобальный запрет прерываний
0x0015	0x018B      	CLRF       INTCON
;test_cc1101_TX.c,349 :: 		IOCAN=0;                                        //запрет прерываний по изменению порта
0x0016	0x0192      	CLRF       IOCAN
;test_cc1101_TX.c,351 :: 		}
L_interrupt29:
;test_cc1101_TX.c,354 :: 		}
L_end_interrupt:
L__interrupt59:
0x0017	0x0009      	RETFIE     %s
; end of _interrupt
_ManPause:
;test_cc1101_TX.c,303 :: 		void ManPause (void)
;test_cc1101_TX.c,305 :: 		delay_us (500000 / MAN_SPEED);
0x0018	0x3003      	MOVLW      3
0x0019	0x00FC      	MOVWF      R12
0x001A	0x3097      	MOVLW      151
0x001B	0x00FD      	MOVWF      R13
L_ManPause23:
0x001C	0x0BFD      	DECFSZ     R13, 1
0x001D	0x281C      	GOTO       L_ManPause23
0x001E	0x0BFC      	DECFSZ     R12, 1
0x001F	0x281C      	GOTO       L_ManPause23
0x0020	0x0000      	NOP
0x0021	0x0000      	NOP
;test_cc1101_TX.c,306 :: 		}
L_end_ManPause:
0x0022	0x0008      	RETURN
; end of _ManPause
_Delay_22us:
;__Lib_Delays.c,15 :: 		void Delay_22us() {
;__Lib_Delays.c,16 :: 		Delay_us(22);
0x0023	0x301D      	MOVLW      29
0x0024	0x00FD      	MOVWF      R13
L_Delay_22us1:
0x0025	0x0BFD      	DECFSZ     R13, 1
0x0026	0x2825      	GOTO       L_Delay_22us1
;__Lib_Delays.c,17 :: 		}
L_end_Delay_22us:
0x0027	0x0008      	RETURN
; end of _Delay_22us
_Delay_1us:
;__Lib_Delays.c,7 :: 		void Delay_1us() {
;__Lib_Delays.c,8 :: 		Delay_us(1);
0x0028	0x0000      	NOP
0x0029	0x0000      	NOP
0x002A	0x0000      	NOP
0x002B	0x0000      	NOP
;__Lib_Delays.c,9 :: 		}
L_end_Delay_1us:
0x002C	0x0008      	RETURN
; end of _Delay_1us
_ManCheckSumm:
;test_cc1101_TX.c,315 :: 		void ManCheckSumm(unsigned char data_t)
;test_cc1101_TX.c,316 :: 		{           unsigned char i=0;
0x002D	0x0020      	MOVLB      0
0x002E	0x01EC      	CLRF       ManCheckSumm_i_L0
;test_cc1101_TX.c,318 :: 		for ( i=0; i<8; i++) {
0x002F	0x01EC      	CLRF       ManCheckSumm_i_L0
L_ManCheckSumm24:
0x0030	0x3008      	MOVLW      8
0x0031	0x026C      	SUBWF      ManCheckSumm_i_L0, 0
0x0032	0x1803      	BTFSC      STATUS, 0
0x0033	0x2849      	GOTO       L_ManCheckSumm25
;test_cc1101_TX.c,320 :: 		unsigned char temp = data_t;
0x0034	0x086B      	MOVF       FARG_ManCheckSumm_data_t, 0
0x0035	0x00F2      	MOVWF      R2
;test_cc1101_TX.c,321 :: 		temp ^= CheckSummByte;
0x0036	0x0861      	MOVF       _CheckSummByte, 0
0x0037	0x066B      	XORWF      FARG_ManCheckSumm_data_t, 0
0x0038	0x00F1      	MOVWF      R1
0x0039	0x0871      	MOVF       R1, 0
0x003A	0x00F2      	MOVWF      R2
;test_cc1101_TX.c,323 :: 		if (temp & 0x01) {
0x003B	0x1C71      	BTFSS      R1, 0
0x003C	0x2842      	GOTO       L_ManCheckSumm27
;test_cc1101_TX.c,325 :: 		CheckSummByte ^= 0x18;
0x003D	0x3018      	MOVLW      24
0x003E	0x06E1      	XORWF      _CheckSummByte, 1
;test_cc1101_TX.c,326 :: 		temp = 0x80;
0x003F	0x3080      	MOVLW      128
0x0040	0x00F2      	MOVWF      R2
;test_cc1101_TX.c,327 :: 		}
0x0041	0x2843      	GOTO       L_ManCheckSumm28
L_ManCheckSumm27:
;test_cc1101_TX.c,329 :: 		else        temp = 0;
0x0042	0x01F2      	CLRF       R2
L_ManCheckSumm28:
;test_cc1101_TX.c,331 :: 		CheckSummByte >>= 1;
0x0043	0x36E1      	LSRF       _CheckSummByte, 1
;test_cc1101_TX.c,332 :: 		CheckSummByte |= temp;
0x0044	0x0872      	MOVF       R2, 0
0x0045	0x04E1      	IORWF       _CheckSummByte, 1
;test_cc1101_TX.c,333 :: 		data_t >>= 1;
0x0046	0x36EB      	LSRF       FARG_ManCheckSumm_data_t, 1
;test_cc1101_TX.c,318 :: 		for ( i=0; i<8; i++) {
0x0047	0x0AEC      	INCF       ManCheckSumm_i_L0, 1
;test_cc1101_TX.c,334 :: 		}
0x0048	0x2830      	GOTO       L_ManCheckSumm24
L_ManCheckSumm25:
;test_cc1101_TX.c,335 :: 		}
L_end_ManCheckSumm:
0x0049	0x0008      	RETURN
; end of _ManCheckSumm
_ManTransmitBit:
;test_cc1101_TX.c,288 :: 		void ManTransmitBit (unsigned char bit_t)
;test_cc1101_TX.c,290 :: 		if (bit_t) {
0x004A	0x0020      	MOVLB      0
0x004B	0x086B      	MOVF       FARG_ManTransmitBit_bit_t, 0
0x004C	0x1903      	BTFSC      STATUS, 2
0x004D	0x2853      	GOTO       L_ManTransmitBit21
;test_cc1101_TX.c,292 :: 		TRANSMIT_PORT &= ~(TRANSMIT_LINE);        ManPause ();
0x004E	0x100E      	BCF        PORTC, 0
0x004F	0x2018      	CALL       _ManPause
;test_cc1101_TX.c,293 :: 		TRANSMIT_PORT |= TRANSMIT_LINE;                ManPause ();                                                                                   ///
0x0050	0x140E      	BSF        PORTC, 0
0x0051	0x2018      	CALL       _ManPause
;test_cc1101_TX.c,294 :: 		}
0x0052	0x2857      	GOTO       L_ManTransmitBit22
L_ManTransmitBit21:
;test_cc1101_TX.c,297 :: 		TRANSMIT_PORT |= TRANSMIT_LINE;                ManPause ();
0x0053	0x140E      	BSF        PORTC, 0
0x0054	0x2018      	CALL       _ManPause
;test_cc1101_TX.c,298 :: 		TRANSMIT_PORT &= ~TRANSMIT_LINE;        ManPause ();
0x0055	0x100E      	BCF        PORTC, 0
0x0056	0x2018      	CALL       _ManPause
;test_cc1101_TX.c,299 :: 		}
L_ManTransmitBit22:
;test_cc1101_TX.c,300 :: 		}
L_end_ManTransmitBit:
0x0057	0x0008      	RETURN
; end of _ManTransmitBit
_Soft_SPI_Write:
;__Lib_SoftSPI.c,21 :: 		
;__Lib_SoftSPI.c,22 :: 		
0x0058	0x3080      	MOVLW      128
0x0059	0x0020      	MOVLB      0
0x005A	0x00EC      	MOVWF      Soft_SPI_Write_i_L0
;__Lib_SoftSPI.c,24 :: 		
0x005B	0x09EB      	COMF       FARG_Soft_SPI_Write_sdata, 1
;__Lib_SoftSPI.c,25 :: 		
L_Soft_SPI_Write0:
0x005C	0x086C      	MOVF       Soft_SPI_Write_i_L0, 0
0x005D	0x1903      	BTFSC      STATUS, 2
0x005E	0x2874      	GOTO       L_Soft_SPI_Write1
;__Lib_SoftSPI.c,26 :: 		
0x005F	0x086C      	MOVF       Soft_SPI_Write_i_L0, 0
0x0060	0x056B      	ANDWF      FARG_Soft_SPI_Write_sdata, 0
0x0061	0x00F1      	MOVWF      R1
0x0062	0x0871      	MOVF       R1, 0
0x0063	0x3001      	MOVLW      1
0x0064	0x1D03      	BTFSS      STATUS, 2
0x0065	0x3000      	MOVLW      0
0x0066	0x00F0      	MOVWF      R0
0x0067	0x1870      	BTFSC      R0, 0
0x0068	0x286B      	GOTO       L__Soft_SPI_Write7
0x0069	0x110E      	BCF        SoftSpi_SDO, BitPos(SoftSpi_SDO+0)
0x006A	0x286C      	GOTO       L__Soft_SPI_Write8
L__Soft_SPI_Write7:
0x006B	0x150E      	BSF        SoftSpi_SDO, BitPos(SoftSpi_SDO+0)
L__Soft_SPI_Write8:
;__Lib_SoftSPI.c,27 :: 		
0x006C	0x2028      	CALL       _Delay_1us
;__Lib_SoftSPI.c,28 :: 		
0x006D	0x2028      	CALL       _Delay_1us
;__Lib_SoftSPI.c,29 :: 		
0x006E	0x160E      	BSF        SoftSpi_CLK, BitPos(SoftSpi_CLK+0)
;__Lib_SoftSPI.c,30 :: 		
0x006F	0x2023      	CALL       _Delay_22us
;__Lib_SoftSPI.c,31 :: 		
0x0070	0x120E      	BCF        SoftSpi_CLK, BitPos(SoftSpi_CLK+0)
;__Lib_SoftSPI.c,32 :: 		
0x0071	0x2023      	CALL       _Delay_22us
;__Lib_SoftSPI.c,33 :: 		
0x0072	0x36EC      	LSRF       Soft_SPI_Write_i_L0, 1
;__Lib_SoftSPI.c,34 :: 		
0x0073	0x285C      	GOTO       L_Soft_SPI_Write0
L_Soft_SPI_Write1:
;__Lib_SoftSPI.c,36 :: 		
L_end_Soft_SPI_Write:
0x0074	0x0008      	RETURN
; end of _Soft_SPI_Write
_fn_cc1101_strob:
;test_cc1101_TX.c,122 :: 		void fn_cc1101_strob(unsigned char  strob)
;test_cc1101_TX.c,124 :: 		Chip_Select = 0;
0x0075	0x0020      	MOVLB      0
0x0076	0x128E      	BCF        RC5_bit, BitPos(RC5_bit+0)
;test_cc1101_TX.c,126 :: 		Soft_SPI_Write( strob);
0x0077	0x0869      	MOVF       FARG_fn_cc1101_strob_strob, 0
0x0078	0x00EB      	MOVWF      FARG_Soft_SPI_Write_sdata
0x0079	0x2058      	CALL       _Soft_SPI_Write
;test_cc1101_TX.c,127 :: 		delay_ms(1);
0x007A	0x3006      	MOVLW      6
0x007B	0x00FC      	MOVWF      R12
0x007C	0x3030      	MOVLW      48
0x007D	0x00FD      	MOVWF      R13
L_fn_cc1101_strob0:
0x007E	0x0BFD      	DECFSZ     R13, 1
0x007F	0x287E      	GOTO       L_fn_cc1101_strob0
0x0080	0x0BFC      	DECFSZ     R12, 1
0x0081	0x287E      	GOTO       L_fn_cc1101_strob0
0x0082	0x0000      	NOP
;test_cc1101_TX.c,128 :: 		Chip_Select = 1;
0x0083	0x168E      	BSF        RC5_bit, BitPos(RC5_bit+0)
;test_cc1101_TX.c,130 :: 		}
L_end_fn_cc1101_strob:
0x0084	0x0008      	RETURN
; end of _fn_cc1101_strob
_ManTransmitByte:
;test_cc1101_TX.c,274 :: 		void ManTransmitByte (unsigned char byte)
;test_cc1101_TX.c,275 :: 		{       unsigned char i=0;
0x0085	0x0020      	MOVLB      0
0x0086	0x01EA      	CLRF       ManTransmitByte_i_L0
;test_cc1101_TX.c,276 :: 		ManCheckSumm (byte);
0x0087	0x0869      	MOVF       FARG_ManTransmitByte_byte, 0
0x0088	0x00EB      	MOVWF      FARG_ManCheckSumm_data_t
0x0089	0x202D      	CALL       _ManCheckSumm
;test_cc1101_TX.c,278 :: 		for ( i=0; i<8; i++) {
0x008A	0x01EA      	CLRF       ManTransmitByte_i_L0
L_ManTransmitByte16:
0x008B	0x3008      	MOVLW      8
0x008C	0x026A      	SUBWF      ManTransmitByte_i_L0, 0
0x008D	0x1803      	BTFSC      STATUS, 0
0x008E	0x289A      	GOTO       L_ManTransmitByte17
;test_cc1101_TX.c,280 :: 		if (byte & 0x80)        ManTransmitBit (1);
0x008F	0x1FE9      	BTFSS      FARG_ManTransmitByte_byte, 7
0x0090	0x2895      	GOTO       L_ManTransmitByte19
0x0091	0x3001      	MOVLW      1
0x0092	0x00EB      	MOVWF      FARG_ManTransmitBit_bit_t
0x0093	0x204A      	CALL       _ManTransmitBit
0x0094	0x2897      	GOTO       L_ManTransmitByte20
L_ManTransmitByte19:
;test_cc1101_TX.c,281 :: 		else                        ManTransmitBit (0);
0x0095	0x01EB      	CLRF       FARG_ManTransmitBit_bit_t
0x0096	0x204A      	CALL       _ManTransmitBit
L_ManTransmitByte20:
;test_cc1101_TX.c,282 :: 		byte <<= 1;
0x0097	0x35E9      	LSLF       FARG_ManTransmitByte_byte, 1
;test_cc1101_TX.c,278 :: 		for ( i=0; i<8; i++) {
0x0098	0x0AEA      	INCF       ManTransmitByte_i_L0, 1
;test_cc1101_TX.c,283 :: 		}
0x0099	0x288B      	GOTO       L_ManTransmitByte16
L_ManTransmitByte17:
;test_cc1101_TX.c,284 :: 		}
L_end_ManTransmitByte:
0x009A	0x0008      	RETURN
; end of _ManTransmitByte
_Delay_500us:
;__Lib_Delays.c,27 :: 		void Delay_500us() {
;__Lib_Delays.c,28 :: 		Delay_us(498);
0x009B	0x3003      	MOVLW      3
0x009C	0x00FC      	MOVWF      R12
0x009D	0x3095      	MOVLW      149
0x009E	0x00FD      	MOVWF      R13
L_Delay_500us4:
0x009F	0x0BFD      	DECFSZ     R13, 1
0x00A0	0x289F      	GOTO       L_Delay_500us4
0x00A1	0x0BFC      	DECFSZ     R12, 1
0x00A2	0x289F      	GOTO       L_Delay_500us4
;__Lib_Delays.c,29 :: 		}
L_end_Delay_500us:
0x00A3	0x0008      	RETURN
; end of _Delay_500us
_ManTransmitData:
;test_cc1101_TX.c,223 :: 		void ManTransmitData (unsigned char BufLen){
;test_cc1101_TX.c,224 :: 		unsigned char  i=0;
0x00A4	0x0020      	MOVLB      0
0x00A5	0x01E3      	CLRF       ManTransmitData_i_L0
0x00A6	0x01E4      	CLRF       ManTransmitData_u_L0
0x00A7	0x01E5      	CLRF       ManTransmitData_a_L0
0x00A8	0x01E6      	CLRF       ManTransmitData_byte_L0
;test_cc1101_TX.c,230 :: 		INTCON.GIE =0;                                         //запрет всех прерываний
0x00A9	0x138B      	BCF        INTCON, 7
;test_cc1101_TX.c,232 :: 		for ( i=0; i< MAN_PILOT_LEN; i++) {                     //передача пилотного сигнала
0x00AA	0x01E3      	CLRF       ManTransmitData_i_L0
L_ManTransmitData6:
0x00AB	0x3008      	MOVLW      8
0x00AC	0x0263      	SUBWF      ManTransmitData_i_L0, 0
0x00AD	0x1803      	BTFSC      STATUS, 0
0x00AE	0x28B4      	GOTO       L_ManTransmitData7
;test_cc1101_TX.c,233 :: 		ManTransmitBit (1);
0x00AF	0x3001      	MOVLW      1
0x00B0	0x00EB      	MOVWF      FARG_ManTransmitBit_bit_t
0x00B1	0x204A      	CALL       _ManTransmitBit
;test_cc1101_TX.c,232 :: 		for ( i=0; i< MAN_PILOT_LEN; i++) {                     //передача пилотного сигнала
0x00B2	0x0AE3      	INCF       ManTransmitData_i_L0, 1
;test_cc1101_TX.c,234 :: 		}
0x00B3	0x28AB      	GOTO       L_ManTransmitData6
L_ManTransmitData7:
;test_cc1101_TX.c,240 :: 		while (1)   {
L_ManTransmitData9:
;test_cc1101_TX.c,242 :: 		byte = ManIdentifier [a];
0x00B4	0x3022      	MOVLW      _ManIdentifier
0x00B5	0x0084      	MOVWF      FSR0
0x00B6	0x3000      	MOVLW      hi_addr(_ManIdentifier)
0x00B7	0x0085      	MOVWF      FSR0H
0x00B8	0x0865      	MOVF       ManTransmitData_a_L0, 0
0x00B9	0x0784      	ADDWF      FSR0, 1
0x00BA	0x1803      	BTFSC      STATUS, 0
0x00BB	0x0A85      	INCF       FSR0H, 1
0x00BC	0x0800      	MOVF       INDF0, 0
0x00BD	0x00F0      	MOVWF      R0
0x00BE	0x0870      	MOVF       R0, 0
0x00BF	0x00E6      	MOVWF      ManTransmitData_byte_L0
;test_cc1101_TX.c,243 :: 		a++;
0x00C0	0x0AE5      	INCF       ManTransmitData_a_L0, 1
;test_cc1101_TX.c,244 :: 		if (byte)ManTransmitByte (byte);
0x00C1	0x0870      	MOVF       R0, 0
0x00C2	0x1903      	BTFSC      STATUS, 2
0x00C3	0x28C8      	GOTO       L_ManTransmitData11
0x00C4	0x0866      	MOVF       ManTransmitData_byte_L0, 0
0x00C5	0x00E9      	MOVWF      FARG_ManTransmitByte_byte
0x00C6	0x2085      	CALL       _ManTransmitByte
0x00C7	0x28C9      	GOTO       L_ManTransmitData12
L_ManTransmitData11:
;test_cc1101_TX.c,246 :: 		break;
0x00C8	0x28CA      	GOTO       L_ManTransmitData10
L_ManTransmitData12:
;test_cc1101_TX.c,247 :: 		}
0x00C9	0x28B4      	GOTO       L_ManTransmitData9
L_ManTransmitData10:
;test_cc1101_TX.c,251 :: 		CheckSummByte = 0;                                   //обнулить контрольку
0x00CA	0x01E1      	CLRF       _CheckSummByte
;test_cc1101_TX.c,252 :: 		ManTransmitByte (BufLen);
0x00CB	0x0862      	MOVF       FARG_ManTransmitData_BufLen, 0
0x00CC	0x00E9      	MOVWF      FARG_ManTransmitByte_byte
0x00CD	0x2085      	CALL       _ManTransmitByte
;test_cc1101_TX.c,255 :: 		for (  u=0; u<(BufLen); u++) {
0x00CE	0x01E4      	CLRF       ManTransmitData_u_L0
L_ManTransmitData13:
0x00CF	0x0862      	MOVF       FARG_ManTransmitData_BufLen, 0
0x00D0	0x0264      	SUBWF      ManTransmitData_u_L0, 0
0x00D1	0x1803      	BTFSC      STATUS, 0
0x00D2	0x28E0      	GOTO       L_ManTransmitData14
;test_cc1101_TX.c,257 :: 		ManTransmitByte (ManTransmitDataBuf [u]);
0x00D3	0x30A0      	MOVLW      _ManTransmitDataBuf
0x00D4	0x0084      	MOVWF      FSR0
0x00D5	0x3000      	MOVLW      hi_addr(_ManTransmitDataBuf)
0x00D6	0x0085      	MOVWF      FSR0H
0x00D7	0x0864      	MOVF       ManTransmitData_u_L0, 0
0x00D8	0x0784      	ADDWF      FSR0, 1
0x00D9	0x1803      	BTFSC      STATUS, 0
0x00DA	0x0A85      	INCF       FSR0H, 1
0x00DB	0x0800      	MOVF       INDF0, 0
0x00DC	0x00E9      	MOVWF      FARG_ManTransmitByte_byte
0x00DD	0x2085      	CALL       _ManTransmitByte
;test_cc1101_TX.c,255 :: 		for (  u=0; u<(BufLen); u++) {
0x00DE	0x0AE4      	INCF       ManTransmitData_u_L0, 1
;test_cc1101_TX.c,258 :: 		}
0x00DF	0x28CF      	GOTO       L_ManTransmitData13
L_ManTransmitData14:
;test_cc1101_TX.c,262 :: 		ManTransmitByte (CheckSummByte);
0x00E0	0x0861      	MOVF       _CheckSummByte, 0
0x00E1	0x00E9      	MOVWF      FARG_ManTransmitByte_byte
0x00E2	0x2085      	CALL       _ManTransmitByte
;test_cc1101_TX.c,265 :: 		LATC.B0 = 0;                                       //гасим порт
0x00E3	0x0022      	MOVLB      2
0x00E4	0x100E      	BCF        LATC, 0
;test_cc1101_TX.c,267 :: 		INTCON.GIE =1;                                       //разрешение прерываний
0x00E5	0x178B      	BSF        INTCON, 7
;test_cc1101_TX.c,269 :: 		}
L_end_ManTransmitData:
0x00E6	0x0008      	RETURN
; end of _ManTransmitData
_ManInit:
;test_cc1101_TX.c,206 :: 		void ManInit (void)
;test_cc1101_TX.c,208 :: 		TRANSMIT_TRIS &= ~TRANSMIT_LINE;                        //линия на вывод
0x00E7	0x0021      	MOVLB      1
0x00E8	0x100E      	BCF        TRISC, 0
;test_cc1101_TX.c,209 :: 		}
L_end_ManInit:
0x00E9	0x0008      	RETURN
; end of _ManInit
_Button:
;__Lib_Button.c,6 :: 		
;__Lib_Button.c,8 :: 		
0x00EA	0x0020      	MOVLB      0
0x00EB	0x01E8      	CLRF       Button_rslt_L0
;__Lib_Button.c,11 :: 		
0x00EC	0x0864      	MOVF       FARG_Button_pin, 0
0x00ED	0x00F1      	MOVWF      R1
0x00EE	0x3001      	MOVLW      1
0x00EF	0x00F0      	MOVWF      R0
0x00F0	0x0871      	MOVF       R1, 0
L__Button5:
0x00F1	0x1903      	BTFSC      STATUS, 2
0x00F2	0x28F6      	GOTO       L__Button6
0x00F3	0x35F0      	LSLF       R0, 1
0x00F4	0x3EFF      	ADDLW      255
0x00F5	0x28F1      	GOTO       L__Button5
L__Button6:
0x00F6	0x0870      	MOVF       R0, 0
0x00F7	0x00E7      	MOVWF      Button_pMask_L0
;__Lib_Button.c,13 :: 		
0x00F8	0x0862      	MOVF       FARG_Button_port, 0
0x00F9	0x0084      	MOVWF      FSR0
0x00FA	0x0863      	MOVF       FARG_Button_port+1, 0
0x00FB	0x0085      	MOVWF      FSR0H
0x00FC	0x0870      	MOVF       R0, 0
0x00FD	0x0500      	ANDWF      INDF0, 0
0x00FE	0x00F1      	MOVWF      R1
0x00FF	0x0871      	MOVF       R1, 0
0x0100	0x3001      	MOVLW      1
0x0101	0x1D03      	BTFSS      STATUS, 2
0x0102	0x3000      	MOVLW      0
0x0103	0x00F0      	MOVWF      R0
0x0104	0x0866      	MOVF       FARG_Button_active_state, 0
0x0105	0x06F0      	XORWF      R0, 1
0x0106	0x1903      	BTFSC      STATUS, 2
0x0107	0x2922      	GOTO       L_Button0
;__Lib_Button.c,15 :: 		
L_Button1:
0x0108	0x0865      	MOVF       FARG_Button_time_ms, 0
0x0109	0x3C00      	SUBLW      0
0x010A	0x1803      	BTFSC      STATUS, 0
0x010B	0x2910      	GOTO       L_Button2
;__Lib_Button.c,16 :: 		
0x010C	0x209B      	CALL       _Delay_500us
;__Lib_Button.c,17 :: 		
0x010D	0x209B      	CALL       _Delay_500us
;__Lib_Button.c,18 :: 		
0x010E	0x03E5      	DECF       FARG_Button_time_ms, 1
;__Lib_Button.c,19 :: 		
0x010F	0x2908      	GOTO       L_Button1
L_Button2:
;__Lib_Button.c,21 :: 		
0x0110	0x0862      	MOVF       FARG_Button_port, 0
0x0111	0x0084      	MOVWF      FSR0
0x0112	0x0863      	MOVF       FARG_Button_port+1, 0
0x0113	0x0085      	MOVWF      FSR0H
0x0114	0x0867      	MOVF       Button_pMask_L0, 0
0x0115	0x0500      	ANDWF      INDF0, 0
0x0116	0x00F1      	MOVWF      R1
0x0117	0x0871      	MOVF       R1, 0
0x0118	0x3001      	MOVLW      1
0x0119	0x1D03      	BTFSS      STATUS, 2
0x011A	0x3000      	MOVLW      0
0x011B	0x00F0      	MOVWF      R0
0x011C	0x0866      	MOVF       FARG_Button_active_state, 0
0x011D	0x06F0      	XORWF      R0, 1
0x011E	0x1903      	BTFSC      STATUS, 2
0x011F	0x2922      	GOTO       L_Button3
;__Lib_Button.c,22 :: 		
0x0120	0x30FF      	MOVLW      255
0x0121	0x00E8      	MOVWF      Button_rslt_L0
L_Button3:
;__Lib_Button.c,23 :: 		
L_Button0:
;__Lib_Button.c,25 :: 		
0x0122	0x0868      	MOVF       Button_rslt_L0, 0
0x0123	0x00F0      	MOVWF      R0
;__Lib_Button.c,26 :: 		
L_end_Button:
0x0124	0x0008      	RETURN
; end of _Button
_ManBufAddByte:
;test_cc1101_TX.c,214 :: 		void ManBufAddByte (unsigned char place, unsigned char byte)
;test_cc1101_TX.c,216 :: 		if (place >= MAN_BUF_LENGTH)        return;
0x0125	0x3010      	MOVLW      16
0x0126	0x0020      	MOVLB      0
0x0127	0x0262      	SUBWF      FARG_ManBufAddByte_place, 0
0x0128	0x1C03      	BTFSS      STATUS, 0
0x0129	0x292B      	GOTO       L_ManBufAddByte5
0x012A	0x2935      	GOTO       L_end_ManBufAddByte
L_ManBufAddByte5:
;test_cc1101_TX.c,217 :: 		ManTransmitDataBuf [place] = byte;
0x012B	0x30A0      	MOVLW      _ManTransmitDataBuf
0x012C	0x0086      	MOVWF      FSR1
0x012D	0x3000      	MOVLW      hi_addr(_ManTransmitDataBuf)
0x012E	0x0087      	MOVWF      FSR1H
0x012F	0x0862      	MOVF       FARG_ManBufAddByte_place, 0
0x0130	0x0786      	ADDWF      FSR1, 1
0x0131	0x1803      	BTFSC      STATUS, 0
0x0132	0x0A87      	INCF       FSR1H, 1
0x0133	0x0863      	MOVF       FARG_ManBufAddByte_byte, 0
0x0134	0x0081      	MOVWF      INDF1
;test_cc1101_TX.c,218 :: 		}
L_end_ManBufAddByte:
0x0135	0x0008      	RETURN
; end of _ManBufAddByte
___CC2DW:
;__Lib_System.c,71 :: 		
;__Lib_System.c,73 :: 		
_CC2DL_Loop1:
;__Lib_System.c,74 :: 		
0x0136	0x0012      	MOVIW      FSR0++ 
;__Lib_System.c,75 :: 		
0x0137	0x001E      	MOVWI      FSR1++ 
;__Lib_System.c,76 :: 		
0x0138	0x03F0      	DECF       R0, 1
;__Lib_System.c,77 :: 		
0x0139	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,78 :: 		
0x013A	0x2936      	GOTO       _CC2DL_Loop1
;__Lib_System.c,79 :: 		
0x013B	0x03F1      	DECF       R1, 1
;__Lib_System.c,80 :: 		
0x013C	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,81 :: 		
0x013D	0x2936      	GOTO       _CC2DL_Loop1
;__Lib_System.c,83 :: 		
L_end___CC2DW:
0x013E	0x0008      	RETURN
; end of ___CC2DW
_fn_cc1101_init:
;test_cc1101_TX.c,135 :: 		void fn_cc1101_init()
;test_cc1101_TX.c,138 :: 		Chip_Select = 0;                // активируем порт, выбираем чип.
0x013F	0x0020      	MOVLB      0
0x0140	0x128E      	BCF        RC5_bit, BitPos(RC5_bit+0)
;test_cc1101_TX.c,142 :: 		for(i=0;i!=58;i++)  // запись 34 регистров из таблицы
0x0141	0x01E2      	CLRF       fn_cc1101_init_i_L0
L_fn_cc1101_init1:
0x0142	0x0862      	MOVF       fn_cc1101_init_i_L0, 0
0x0143	0x3A3A      	XORLW      58
0x0144	0x1903      	BTFSC      STATUS, 2
0x0145	0x2953      	GOTO       L_fn_cc1101_init2
;test_cc1101_TX.c,144 :: 		Soft_SPI_Write(rf_settings[i]);       //
0x0146	0x3024      	MOVLW      _rf_settings
0x0147	0x0084      	MOVWF      FSR0
0x0148	0x3000      	MOVLW      hi_addr(_rf_settings)
0x0149	0x0085      	MOVWF      FSR0H
0x014A	0x0862      	MOVF       fn_cc1101_init_i_L0, 0
0x014B	0x0784      	ADDWF      FSR0, 1
0x014C	0x1803      	BTFSC      STATUS, 0
0x014D	0x0A85      	INCF       FSR0H, 1
0x014E	0x0800      	MOVF       INDF0, 0
0x014F	0x00EB      	MOVWF      FARG_Soft_SPI_Write_sdata
0x0150	0x2058      	CALL       _Soft_SPI_Write
;test_cc1101_TX.c,142 :: 		for(i=0;i!=58;i++)  // запись 34 регистров из таблицы
0x0151	0x0AE2      	INCF       fn_cc1101_init_i_L0, 1
;test_cc1101_TX.c,146 :: 		}
0x0152	0x2942      	GOTO       L_fn_cc1101_init1
L_fn_cc1101_init2:
;test_cc1101_TX.c,150 :: 		Chip_Select = 1;          // отпускаем порт
0x0153	0x168E      	BSF        RC5_bit, BitPos(RC5_bit+0)
;test_cc1101_TX.c,155 :: 		delay_ms(5);
0x0154	0x301A      	MOVLW      26
0x0155	0x00FC      	MOVWF      R12
0x0156	0x30F8      	MOVLW      248
0x0157	0x00FD      	MOVWF      R13
L_fn_cc1101_init4:
0x0158	0x0BFD      	DECFSZ     R13, 1
0x0159	0x2958      	GOTO       L_fn_cc1101_init4
0x015A	0x0BFC      	DECFSZ     R12, 1
0x015B	0x2958      	GOTO       L_fn_cc1101_init4
0x015C	0x0000      	NOP
;test_cc1101_TX.c,156 :: 		fn_cc1101_strob (SIDLE);
0x015D	0x3036      	MOVLW      54
0x015E	0x00E9      	MOVWF      FARG_fn_cc1101_strob_strob
0x015F	0x2075      	CALL       _fn_cc1101_strob
;test_cc1101_TX.c,157 :: 		return;
;test_cc1101_TX.c,158 :: 		}
L_end_fn_cc1101_init:
0x0160	0x0008      	RETURN
; end of _fn_cc1101_init
_Soft_SPI_Init:
;__Lib_SoftSPI.c,11 :: 		
;__Lib_SoftSPI.c,12 :: 		
0x0161	0x0021      	MOVLB      1
0x0162	0x158E      	BSF        SoftSpi_SDI_Direction, BitPos(SoftSpi_SDI_Direction+0)
;__Lib_SoftSPI.c,13 :: 		
0x0163	0x110E      	BCF        SoftSpi_SDO_Direction, BitPos(SoftSpi_SDO_Direction+0)
;__Lib_SoftSPI.c,14 :: 		
0x0164	0x120E      	BCF        SoftSpi_CLK_Direction, BitPos(SoftSpi_CLK_Direction+0)
;__Lib_SoftSPI.c,16 :: 		
0x0165	0x0020      	MOVLB      0
0x0166	0x118E      	BCF        SoftSpi_SDI, BitPos(SoftSpi_SDI+0)
;__Lib_SoftSPI.c,17 :: 		
0x0167	0x110E      	BCF        SoftSpi_SDO, BitPos(SoftSpi_SDO+0)
;__Lib_SoftSPI.c,18 :: 		
0x0168	0x120E      	BCF        SoftSpi_CLK, BitPos(SoftSpi_CLK+0)
;__Lib_SoftSPI.c,19 :: 		
L_end_Soft_SPI_Init:
0x0169	0x0008      	RETURN
; end of _Soft_SPI_Init
_main:
0x016A	0x226E      	CALL       622
;test_cc1101_TX.c,358 :: 		void main (void) {
;test_cc1101_TX.c,359 :: 		OSCCON=0b11111111;                                       //тактовая частота
0x016B	0x30FF      	MOVLW      255
0x016C	0x0021      	MOVLB      1
0x016D	0x0099      	MOVWF      OSCCON
;test_cc1101_TX.c,360 :: 		TRISA=0b11111111;
0x016E	0x30FF      	MOVLW      255
0x016F	0x008C      	MOVWF      TRISA
;test_cc1101_TX.c,361 :: 		ANSELA=0;
0x0170	0x0023      	MOVLB      3
0x0171	0x018C      	CLRF       ANSELA
;test_cc1101_TX.c,362 :: 		ANSELC=0;                                               //отключение АЦП
0x0172	0x018E      	CLRF       ANSELC
;test_cc1101_TX.c,363 :: 		PORTA=0b000000;
0x0173	0x0020      	MOVLB      0
0x0174	0x018C      	CLRF       PORTA
;test_cc1101_TX.c,364 :: 		WPUA=0b111111;                                           //подтягивающие резист.
0x0175	0x303F      	MOVLW      63
0x0176	0x0024      	MOVLB      4
0x0177	0x008C      	MOVWF      WPUA
;test_cc1101_TX.c,365 :: 		TRISC=0b00000000;
0x0178	0x0021      	MOVLB      1
0x0179	0x018E      	CLRF       TRISC
;test_cc1101_TX.c,366 :: 		PORTC=0b00000000;
0x017A	0x0020      	MOVLB      0
0x017B	0x018E      	CLRF       PORTC
;test_cc1101_TX.c,367 :: 		OPTION_REG=0b00000000;
0x017C	0x0021      	MOVLB      1
0x017D	0x0195      	CLRF       OPTION_REG
;test_cc1101_TX.c,368 :: 		INTCON=0b00000000;                                       //настройки прерываний
0x017E	0x018B      	CLRF       INTCON
;test_cc1101_TX.c,369 :: 		WDTCON=0b00010000;                                       //делитель собаки ???
0x017F	0x3010      	MOVLW      16
0x0180	0x0097      	MOVWF      WDTCON
;test_cc1101_TX.c,370 :: 		IOCAN=0b00000000;                                        //прерывание по изменению порта
0x0181	0x0027      	MOVLB      7
0x0182	0x0192      	CLRF       IOCAN
;test_cc1101_TX.c,373 :: 		Soft_SPI_Init();                                       //инициализация программного SPI
0x0183	0x2161      	CALL       _Soft_SPI_Init
;test_cc1101_TX.c,374 :: 		fn_cc1101_init();                                      // инициализация трансивера cc1101
0x0184	0x213F      	CALL       _fn_cc1101_init
;test_cc1101_TX.c,375 :: 		ManInit ();                                           //инициализация  передачи манчестер сигнала
0x0185	0x20E7      	CALL       _ManInit
;test_cc1101_TX.c,378 :: 		while(1){
L_main30:
;test_cc1101_TX.c,379 :: 		asm{clrwdt};                                       //сброс собаки
0x0186	0x0064      	CLRWDT
;test_cc1101_TX.c,381 :: 		if( !flag_status_cc1101_tx ) {                           // проверка флага включения передатчика
0x0187	0x0020      	MOVLB      0
0x0188	0x0820      	MOVF       _flag_status_cc1101_tx, 0
0x0189	0x1D03      	BTFSS      STATUS, 2
0x018A	0x299C      	GOTO       L_main32
;test_cc1101_TX.c,382 :: 		PWR_TRANSEIVER=1;                                  // включаем питание передатчика
0x018B	0x0022      	MOVLB      2
0x018C	0x148E      	BSF        LATC, 1
;test_cc1101_TX.c,383 :: 		fn_cc1101_strob (STX);                             //включаем трансивер на передачу
0x018D	0x3035      	MOVLW      53
0x018E	0x0020      	MOVLB      0
0x018F	0x00E9      	MOVWF      FARG_fn_cc1101_strob_strob
0x0190	0x2075      	CALL       _fn_cc1101_strob
;test_cc1101_TX.c,384 :: 		delay_ms(5);
0x0191	0x301A      	MOVLW      26
0x0192	0x00FC      	MOVWF      R12
0x0193	0x30F8      	MOVLW      248
0x0194	0x00FD      	MOVWF      R13
L_main33:
0x0195	0x0BFD      	DECFSZ     R13, 1
0x0196	0x2995      	GOTO       L_main33
0x0197	0x0BFC      	DECFSZ     R12, 1
0x0198	0x2995      	GOTO       L_main33
0x0199	0x0000      	NOP
;test_cc1101_TX.c,385 :: 		flag_status_cc1101_tx=1;                          //устанавливаем флаг
0x019A	0x3001      	MOVLW      1
0x019B	0x00A0      	MOVWF      _flag_status_cc1101_tx
;test_cc1101_TX.c,386 :: 		}
L_main32:
;test_cc1101_TX.c,389 :: 		while( flag_status_cc1101_tx){
L_main34:
0x019C	0x0020      	MOVLB      0
0x019D	0x0820      	MOVF       _flag_status_cc1101_tx, 0
0x019E	0x1903      	BTFSC      STATUS, 2
0x019F	0x2A27      	GOTO       L_main35
;test_cc1101_TX.c,393 :: 		asm{clrwdt};                                       //сброс собаки
0x01A0	0x0064      	CLRWDT
;test_cc1101_TX.c,395 :: 		if( Button(FORWARD))  dataButtons |=(1<<0);        //опрос кнопок
0x01A1	0x300C      	MOVLW      PORTA
0x01A2	0x00E2      	MOVWF      FARG_Button_port
0x01A3	0x3000      	MOVLW      hi_addr(PORTA)
0x01A4	0x00E3      	MOVWF      FARG_Button_port+1
0x01A5	0x01E4      	CLRF       FARG_Button_pin
0x01A6	0x3014      	MOVLW      20
0x01A7	0x00E5      	MOVWF      FARG_Button_time_ms
0x01A8	0x01E6      	CLRF       FARG_Button_active_state
0x01A9	0x20EA      	CALL       _Button
0x01AA	0x0870      	MOVF       R0, 0
0x01AB	0x1903      	BTFSC      STATUS, 2
0x01AC	0x29AE      	GOTO       L_main36
0x01AD	0x1421      	BSF        _dataButtons, 0
L_main36:
;test_cc1101_TX.c,396 :: 		if( Button(REVERSE))  dataButtons |=(1<<1);
0x01AE	0x300C      	MOVLW      PORTA
0x01AF	0x00E2      	MOVWF      FARG_Button_port
0x01B0	0x3000      	MOVLW      hi_addr(PORTA)
0x01B1	0x00E3      	MOVWF      FARG_Button_port+1
0x01B2	0x3001      	MOVLW      1
0x01B3	0x00E4      	MOVWF      FARG_Button_pin
0x01B4	0x3014      	MOVLW      20
0x01B5	0x00E5      	MOVWF      FARG_Button_time_ms
0x01B6	0x01E6      	CLRF       FARG_Button_active_state
0x01B7	0x20EA      	CALL       _Button
0x01B8	0x0870      	MOVF       R0, 0
0x01B9	0x1903      	BTFSC      STATUS, 2
0x01BA	0x29BC      	GOTO       L_main37
0x01BB	0x14A1      	BSF        _dataButtons, 1
L_main37:
;test_cc1101_TX.c,397 :: 		if( Button(LEFT ))    dataButtons |=(1<<2);
0x01BC	0x300C      	MOVLW      PORTA
0x01BD	0x00E2      	MOVWF      FARG_Button_port
0x01BE	0x3000      	MOVLW      hi_addr(PORTA)
0x01BF	0x00E3      	MOVWF      FARG_Button_port+1
0x01C0	0x3002      	MOVLW      2
0x01C1	0x00E4      	MOVWF      FARG_Button_pin
0x01C2	0x3014      	MOVLW      20
0x01C3	0x00E5      	MOVWF      FARG_Button_time_ms
0x01C4	0x01E6      	CLRF       FARG_Button_active_state
0x01C5	0x20EA      	CALL       _Button
0x01C6	0x0870      	MOVF       R0, 0
0x01C7	0x1903      	BTFSC      STATUS, 2
0x01C8	0x29CA      	GOTO       L_main38
0x01C9	0x1521      	BSF        _dataButtons, 2
L_main38:
;test_cc1101_TX.c,398 :: 		if( Button(RIGHT))    dataButtons |=(1<<3);
0x01CA	0x300C      	MOVLW      PORTA
0x01CB	0x00E2      	MOVWF      FARG_Button_port
0x01CC	0x3000      	MOVLW      hi_addr(PORTA)
0x01CD	0x00E3      	MOVWF      FARG_Button_port+1
0x01CE	0x3004      	MOVLW      4
0x01CF	0x00E4      	MOVWF      FARG_Button_pin
0x01D0	0x3014      	MOVLW      20
0x01D1	0x00E5      	MOVWF      FARG_Button_time_ms
0x01D2	0x01E6      	CLRF       FARG_Button_active_state
0x01D3	0x20EA      	CALL       _Button
0x01D4	0x0870      	MOVF       R0, 0
0x01D5	0x1903      	BTFSC      STATUS, 2
0x01D6	0x29D8      	GOTO       L_main39
0x01D7	0x15A1      	BSF        _dataButtons, 3
L_main39:
;test_cc1101_TX.c,400 :: 		if( Button(TRIGGER_PASS))  {
0x01D8	0x300C      	MOVLW      PORTA
0x01D9	0x00E2      	MOVWF      FARG_Button_port
0x01DA	0x3000      	MOVLW      hi_addr(PORTA)
0x01DB	0x00E3      	MOVWF      FARG_Button_port+1
0x01DC	0x3005      	MOVLW      5
0x01DD	0x00E4      	MOVWF      FARG_Button_pin
0x01DE	0x3014      	MOVLW      20
0x01DF	0x00E5      	MOVWF      FARG_Button_time_ms
0x01E0	0x3001      	MOVLW      1
0x01E1	0x00E6      	MOVWF      FARG_Button_active_state
0x01E2	0x20EA      	CALL       _Button
0x01E3	0x0870      	MOVF       R0, 0
0x01E4	0x1903      	BTFSC      STATUS, 2
0x01E5	0x29E8      	GOTO       L_main40
;test_cc1101_TX.c,401 :: 		flagOldstate=1;
0x01E6	0x3001      	MOVLW      1
0x01E7	0x00DF      	MOVWF      _flagOldstate
;test_cc1101_TX.c,402 :: 		}
L_main40:
;test_cc1101_TX.c,405 :: 		if( Button (TRIGGER_ACT) && flagOldstate ) {        //управление светом фар
0x01E8	0x300C      	MOVLW      PORTA
0x01E9	0x00E2      	MOVWF      FARG_Button_port
0x01EA	0x3000      	MOVLW      hi_addr(PORTA)
0x01EB	0x00E3      	MOVWF      FARG_Button_port+1
0x01EC	0x3005      	MOVLW      5
0x01ED	0x00E4      	MOVWF      FARG_Button_pin
0x01EE	0x3014      	MOVLW      20
0x01EF	0x00E5      	MOVWF      FARG_Button_time_ms
0x01F0	0x01E6      	CLRF       FARG_Button_active_state
0x01F1	0x20EA      	CALL       _Button
0x01F2	0x0870      	MOVF       R0, 0
0x01F3	0x1903      	BTFSC      STATUS, 2
0x01F4	0x2A05      	GOTO       L_main43
0x01F5	0x085F      	MOVF       _flagOldstate, 0
0x01F6	0x1903      	BTFSC      STATUS, 2
0x01F7	0x2A05      	GOTO       L_main43
L__main48:
;test_cc1101_TX.c,406 :: 		flagOldstate=0;
0x01F8	0x01DF      	CLRF       _flagOldstate
;test_cc1101_TX.c,407 :: 		flagTrigger = ~flagTrigger;
0x01F9	0x0960      	COMF       _flagTrigger, 0
0x01FA	0x00F0      	MOVWF      R0
0x01FB	0x0870      	MOVF       R0, 0
0x01FC	0x00E0      	MOVWF      _flagTrigger
;test_cc1101_TX.c,408 :: 		if(flagTrigger){
0x01FD	0x0870      	MOVF       R0, 0
0x01FE	0x1903      	BTFSC      STATUS, 2
0x01FF	0x2A03      	GOTO       L_main44
;test_cc1101_TX.c,409 :: 		dataButtons |=(1<<4);                      //для триггера(свет фар)используем два бита,один(4)вкл.
0x0200	0x1621      	BSF        _dataButtons, 4
;test_cc1101_TX.c,410 :: 		dataButtons &=~(1<<5);                     //второй(5) выкл.
0x0201	0x12A1      	BCF        _dataButtons, 5
;test_cc1101_TX.c,411 :: 		}
0x0202	0x2A05      	GOTO       L_main45
L_main44:
;test_cc1101_TX.c,413 :: 		dataButtons &=~(1<<4);                   //очистить бит включения света
0x0203	0x1221      	BCF        _dataButtons, 4
;test_cc1101_TX.c,414 :: 		dataButtons |=(1<<5);                    //команда выключить свет
0x0204	0x16A1      	BSF        _dataButtons, 5
;test_cc1101_TX.c,415 :: 		}
L_main45:
;test_cc1101_TX.c,416 :: 		}
L_main43:
;test_cc1101_TX.c,419 :: 		if(dataButtons){                                  // если кнопка нажата...
0x0205	0x0821      	MOVF       _dataButtons, 0
0x0206	0x1903      	BTFSC      STATUS, 2
0x0207	0x2A17      	GOTO       L_main46
;test_cc1101_TX.c,421 :: 		ManBufAddByte(0,dataButtons );                //поместить в 0 ячейку буфера байт данных кнопок
0x0208	0x01E2      	CLRF       FARG_ManBufAddByte_place
0x0209	0x0821      	MOVF       _dataButtons, 0
0x020A	0x00E3      	MOVWF      FARG_ManBufAddByte_byte
0x020B	0x2125      	CALL       _ManBufAddByte
;test_cc1101_TX.c,422 :: 		ManBufAddByte(1,speedLevel);                  //поместить в 1 ячейку буфера байт данных скорости
0x020C	0x3001      	MOVLW      1
0x020D	0x00E2      	MOVWF      FARG_ManBufAddByte_place
0x020E	0x085E      	MOVF       _speedLevel, 0
0x020F	0x00E3      	MOVWF      FARG_ManBufAddByte_byte
0x0210	0x2125      	CALL       _ManBufAddByte
;test_cc1101_TX.c,424 :: 		ManTransmitData (2);                         //передать два байта данных из буфера
0x0211	0x3002      	MOVLW      2
0x0212	0x00E2      	MOVWF      FARG_ManTransmitData_BufLen
0x0213	0x20A4      	CALL       _ManTransmitData
;test_cc1101_TX.c,425 :: 		dataButtons=0;                               //обнулить переменную опроса кнопок
0x0214	0x0020      	MOVLB      0
0x0215	0x01A1      	CLRF       _dataButtons
;test_cc1101_TX.c,427 :: 		}
0x0216	0x2A26      	GOTO       L_main47
L_main46:
;test_cc1101_TX.c,429 :: 		flagOldstate=1;                           //выставим флаг триггера
0x0217	0x3001      	MOVLW      1
0x0218	0x00DF      	MOVWF      _flagOldstate
;test_cc1101_TX.c,430 :: 		PWR_TRANSEIVER=0;                         //выключаем питание передатчика
0x0219	0x0022      	MOVLB      2
0x021A	0x108E      	BCF        LATC, 1
;test_cc1101_TX.c,431 :: 		fn_cc1101_strob (SIDLE);                  //трансивер в ждущий режим
0x021B	0x3036      	MOVLW      54
0x021C	0x0020      	MOVLB      0
0x021D	0x00E9      	MOVWF      FARG_fn_cc1101_strob_strob
0x021E	0x2075      	CALL       _fn_cc1101_strob
;test_cc1101_TX.c,432 :: 		flag_status_cc1101_tx=0;                  //сброс флага включения передатчика
0x021F	0x01A0      	CLRF       _flag_status_cc1101_tx
;test_cc1101_TX.c,433 :: 		INTCON=0b10001000;                        //настройки прерываний
0x0220	0x3088      	MOVLW      136
0x0221	0x008B      	MOVWF      INTCON
;test_cc1101_TX.c,434 :: 		IOCAN=0b00110111;                        //прерывание по изменению порта
0x0222	0x3037      	MOVLW      55
0x0223	0x0027      	MOVLB      7
0x0224	0x0092      	MOVWF      IOCAN
;test_cc1101_TX.c,435 :: 		asm{sleep};                              //идем спать
0x0225	0x0063      	SLEEP
;test_cc1101_TX.c,437 :: 		}
L_main47:
;test_cc1101_TX.c,439 :: 		}
0x0226	0x299C      	GOTO       L_main34
L_main35:
;test_cc1101_TX.c,442 :: 		}
0x0227	0x2986      	GOTO       L_main30
;test_cc1101_TX.c,445 :: 		}
L_end_main:
0x0228	0x2A28      	GOTO       $+0
; end of _main
0x026E	0x302C      	MOVLW      44
0x026F	0x0084      	MOVWF      FSR0
0x0270	0x3082      	MOVLW      130
0x0271	0x0085      	MOVWF      FSR0H
0x0272	0x3041      	MOVLW      65
0x0273	0x00F0      	MOVWF      R0
0x0274	0x3001      	MOVLW      1
0x0275	0x00F1      	MOVWF      R1
0x0276	0x3020      	MOVLW      32
0x0277	0x0086      	MOVWF      FSR1
0x0278	0x3000      	MOVLW      0
0x0279	0x0087      	MOVWF      FSR1H
0x027A	0x2136      	CALL       310
0x027B	0x0008      	RETURN
;test_cc1101_TX.c,0 :: ?ICS_flag_status_cc1101_tx
0x022C	0x3400 ;?ICS_flag_status_cc1101_tx+0
; end of ?ICS_flag_status_cc1101_tx
;test_cc1101_TX.c,0 :: ?ICS_dataButtons
0x022D	0x3400 ;?ICS_dataButtons+0
; end of ?ICS_dataButtons
;test_cc1101_TX.c,0 :: ?ICS_ManIdentifier
0x022E	0x3473 ;?ICS_ManIdentifier+0
0x022F	0x3400 ;?ICS_ManIdentifier+1
; end of ?ICS_ManIdentifier
;test_cc1101_TX.c,0 :: ?ICS_rf_settings
0x0230	0x3402 ;?ICS_rf_settings+0
0x0231	0x3400 ;?ICS_rf_settings+1
0x0232	0x3400 ;?ICS_rf_settings+2
0x0233	0x340D ;?ICS_rf_settings+3
0x0234	0x3403 ;?ICS_rf_settings+4
0x0235	0x3447 ;?ICS_rf_settings+5
0x0236	0x3408 ;?ICS_rf_settings+6
0x0237	0x3432 ;?ICS_rf_settings+7
0x0238	0x340B ;?ICS_rf_settings+8
0x0239	0x3406 ;?ICS_rf_settings+9
0x023A	0x340C ;?ICS_rf_settings+10
0x023B	0x3400 ;?ICS_rf_settings+11
0x023C	0x340D ;?ICS_rf_settings+12
0x023D	0x3410 ;?ICS_rf_settings+13
0x023E	0x340E ;?ICS_rf_settings+14
0x023F	0x34B0 ;?ICS_rf_settings+15
0x0240	0x340F ;?ICS_rf_settings+16
0x0241	0x3471 ;?ICS_rf_settings+17
0x0242	0x3410 ;?ICS_rf_settings+18
0x0243	0x34A7 ;?ICS_rf_settings+19
0x0244	0x3411 ;?ICS_rf_settings+20
0x0245	0x3432 ;?ICS_rf_settings+21
0x0246	0x3412 ;?ICS_rf_settings+22
0x0247	0x3430 ;?ICS_rf_settings+23
0x0248	0x3413 ;?ICS_rf_settings+24
0x0249	0x3422 ;?ICS_rf_settings+25
0x024A	0x3414 ;?ICS_rf_settings+26
0x024B	0x34F8 ;?ICS_rf_settings+27
0x024C	0x3416 ;?ICS_rf_settings+28
0x024D	0x3407 ;?ICS_rf_settings+29
0x024E	0x3417 ;?ICS_rf_settings+30
0x024F	0x3430 ;?ICS_rf_settings+31
0x0250	0x3418 ;?ICS_rf_settings+32
0x0251	0x3418 ;?ICS_rf_settings+33
0x0252	0x341B ;?ICS_rf_settings+34
0x0253	0x3404 ;?ICS_rf_settings+35
0x0254	0x341C ;?ICS_rf_settings+36
0x0255	0x3400 ;?ICS_rf_settings+37
0x0256	0x341D ;?ICS_rf_settings+38
0x0257	0x3492 ;?ICS_rf_settings+39
0x0258	0x3421 ;?ICS_rf_settings+40
0x0259	0x34B6 ;?ICS_rf_settings+41
0x025A	0x3422 ;?ICS_rf_settings+42
0x025B	0x3411 ;?ICS_rf_settings+43
0x025C	0x3423 ;?ICS_rf_settings+44
0x025D	0x34E9 ;?ICS_rf_settings+45
0x025E	0x3424 ;?ICS_rf_settings+46
0x025F	0x342A ;?ICS_rf_settings+47
0x0260	0x3425 ;?ICS_rf_settings+48
0x0261	0x3400 ;?ICS_rf_settings+49
0x0262	0x3426 ;?ICS_rf_settings+50
0x0263	0x341F ;?ICS_rf_settings+51
0x0264	0x342C ;?ICS_rf_settings+52
0x0265	0x3481 ;?ICS_rf_settings+53
0x0266	0x342D ;?ICS_rf_settings+54
0x0267	0x3435 ;?ICS_rf_settings+55
0x0268	0x342E ;?ICS_rf_settings+56
0x0269	0x3409 ;?ICS_rf_settings+57
; end of ?ICS_rf_settings
;test_cc1101_TX.c,0 :: ?ICS_speedLevel
0x026A	0x3480 ;?ICS_speedLevel+0
; end of ?ICS_speedLevel
;test_cc1101_TX.c,0 :: ?ICS_flagOldstate
0x026B	0x3400 ;?ICS_flagOldstate+0
; end of ?ICS_flagOldstate
;test_cc1101_TX.c,0 :: ?ICS_flagTrigger
0x026C	0x3400 ;?ICS_flagTrigger+0
; end of ?ICS_flagTrigger
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [20]    _interrupt
0x0018      [11]    _ManPause
0x0023       [5]    _Delay_22us
0x0028       [5]    _Delay_1us
0x002D      [29]    _ManCheckSumm
0x004A      [14]    _ManTransmitBit
0x0058      [29]    _Soft_SPI_Write
0x0075      [16]    _fn_cc1101_strob
0x0085      [22]    _ManTransmitByte
0x009B       [9]    _Delay_500us
0x00A4      [67]    _ManTransmitData
0x00E7       [3]    _ManInit
0x00EA      [59]    _Button
0x0125      [17]    _ManBufAddByte
0x0136       [9]    ___CC2DW
0x013F      [34]    _fn_cc1101_init
0x0161       [9]    _Soft_SPI_Init
0x016A     [190]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF0
0x0001       [1]    INDF1
0x0003       [1]    STATUS
0x0004       [1]    FSR0L
0x0005       [1]    FSR0H
0x0006       [1]    FSR1L
0x0007       [1]    FSR1H
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [1]    PORTA
0x000E       [0]    RC3_bit
0x000E       [0]    Chip_Select
0x000E       [0]    RC2_bit
0x000E       [0]    RC5_bit
0x000E       [0]    SoftSpi_SDI
0x000E       [0]    SoftSpi_SDO
0x000E       [0]    SoftSpi_CLK
0x000E       [0]    RC4_bit
0x000E       [1]    PORTC
0x0020       [1]    _flag_status_cc1101_tx
0x0021       [1]    _dataButtons
0x0022       [2]    _ManIdentifier
0x0024      [58]    _rf_settings
0x005E       [1]    _speedLevel
0x005F       [1]    _flagOldstate
0x0060       [1]    _flagTrigger
0x0061       [1]    _CheckSummByte
0x0062       [1]    FARG_ManTransmitData_BufLen
0x0062       [1]    fn_cc1101_init_i_L0
0x0062       [1]    FARG_ManBufAddByte_place
0x0062       [2]    FARG_Button_port
0x0063       [1]    FARG_ManBufAddByte_byte
0x0063       [1]    ManTransmitData_i_L0
0x0064       [1]    FARG_Button_pin
0x0064       [1]    ManTransmitData_u_L0
0x0065       [1]    FARG_Button_time_ms
0x0065       [1]    ManTransmitData_a_L0
0x0066       [1]    ManTransmitData_byte_L0
0x0066       [1]    FARG_Button_active_state
0x0067       [1]    Button_pMask_L0
0x0068       [1]    Button_rslt_L0
0x0069       [1]    FARG_fn_cc1101_strob_strob
0x0069       [1]    FARG_ManTransmitByte_byte
0x006A       [1]    ManTransmitByte_i_L0
0x006B       [1]    FARG_Soft_SPI_Write_sdata
0x006B       [1]    FARG_ManCheckSumm_data_t
0x006B       [1]    FARG_ManTransmitBit_bit_t
0x006C       [1]    ManCheckSumm_i_L0
0x006C       [1]    Soft_SPI_Write_i_L0
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x008C       [1]    TRISA
0x008E       [0]    SoftSpi_SDI_Direction
0x008E       [0]    SoftSpi_SDO_Direction
0x008E       [0]    TRISC4_bit
0x008E       [0]    TRISC3_bit
0x008E       [1]    TRISC
0x008E       [0]    TRISC2_bit
0x008E       [0]    SoftSpi_CLK_Direction
0x0095       [1]    OPTION_REG
0x0097       [1]    WDTCON
0x0099       [1]    OSCCON
0x00A0      [16]    _ManTransmitDataBuf
0x010E       [1]    LATC
0x018C       [1]    ANSELA
0x018E       [1]    ANSELC
0x020C       [1]    WPUA
0x0392       [1]    IOCAN
0x0393       [1]    IOCAF
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x022C       [1]    ?ICS_flag_status_cc1101_tx
0x022D       [1]    ?ICS_dataButtons
0x022E       [2]    ?ICS_ManIdentifier
0x0230      [58]    ?ICS_rf_settings
0x026A       [1]    ?ICS_speedLevel
0x026B       [1]    ?ICS_flagOldstate
0x026C       [1]    ?ICS_flagTrigger
//** Label List: ** 
//----------------------------------------------
  L_fn_cc1101_strob0
  L_fn_cc1101_init1
  L_fn_cc1101_init2
  L_fn_cc1101_init3
  L_fn_cc1101_init4
  L_ManBufAddByte5
  L_ManTransmitData6
  L_ManTransmitData7
  L_ManTransmitData8
  L_ManTransmitData9
  L_ManTransmitData10
  L_ManTransmitData11
  L_ManTransmitData12
  L_ManTransmitData13
  L_ManTransmitData14
  L_ManTransmitData15
  L_ManTransmitByte16
  L_ManTransmitByte17
  L_ManTransmitByte18
  L_ManTransmitByte19
  L_ManTransmitByte20
  L_ManTransmitBit21
  L_ManTransmitBit22
  L_ManPause23
  L_ManCheckSumm24
  L_ManCheckSumm25
  L_ManCheckSumm26
  L_ManCheckSumm27
  L_ManCheckSumm28
  L_interrupt29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L_main35
  L_main36
  L_main37
  L_main38
  L_main39
  L_main40
  L_main41
  L_main42
  L_main43
  L_main44
  L_main45
  L_main46
  L_main47
  L__main48
  L_end_fn_cc1101_strob
  _fn_cc1101_strob
  L_end_fn_cc1101_init
  _fn_cc1101_init
  L_end_ManInit
  _ManInit
  L_end_ManBufAddByte
  _ManBufAddByte
  L_end_ManTransmitData
  _ManTransmitData
  L_end_ManTransmitByte
  _ManTransmitByte
  L_end_ManTransmitBit
  _ManTransmitBit
  L_end_ManPause
  _ManPause
  L_end_ManCheckSumm
  _ManCheckSumm
  L_end_interrupt
  _interrupt
  L__interrupt59
  L__interrupt60
  L__interrupt61
  L_end_main
  _main
  L_Button0
  L_Button1
  L_Button2
  L_Button3
  L_end_Button
  _Button
  L__Button5
  L__Button6
  L_Delay_10us0
  L_Delay_22us1
  L_Delay_50us2
  L_Delay_80us3
  L_Delay_500us4
  L_Delay_5500us5
  L_Delay_1ms6
  L_Delay_5ms7
  L_Delay_8ms8
  L_Delay_10ms9
  L_Delay_100ms10
  L_Delay_1sec11
  L_boot16_Delay_5ms12
  L_Delay_Cyc13
  L_Delay_Cyc14
  L_VDelay_ms15
  L_VDelay_ms16
  L_VDelay_ms17
  L_VDelay_Advanced_ms18
  L_VDelay_Advanced_ms19
  L_VDelay_Advanced_ms20
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Delay_1us
  _Delay_1us
  L_end_Delay_10us
  _Delay_10us
  L_end_Delay_22us
  _Delay_22us
  L_end_Delay_50us
  _Delay_50us
  L_end_Delay_80us
  _Delay_80us
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_1sec
  _Delay_1sec
  L_end_boot16_Delay_5ms
  _boot16_Delay_5ms
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_VDelay_ms
  _VDelay_ms
  L__VDelay_ms38
  L__VDelay_ms39
  L__VDelay_ms40
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L__VDelay_Advanced_ms42
  L__VDelay_Advanced_ms43
  L__VDelay_Advanced_ms44
  L_Soft_SPI_Write0
  L_Soft_SPI_Write1
  L_Soft_SPI_Read2
  L_Soft_SPI_Read3
  L_Soft_SPI_Read4
  L_end_Soft_SPI_Init
  _Soft_SPI_Init
  L_end_Soft_SPI_Write
  _Soft_SPI_Write
  L__Soft_SPI_Write7
  L__Soft_SPI_Write8
  L_end_Soft_SPI_Read
  _Soft_SPI_Read
  L__Soft_SPI_Read10
  L__Soft_SPI_Read11
  L_CA2A_Loop
  L_CA2AW_Loop
  L_CS2S_Loop
  L_CS2S_End
  L_FZinS_Loop
  L_FZinS_End
  _CC2D_Loop1
  _CC2DL_Loop1
  L_end_____DoIFC
  _____DoIFC
  L_end___CA2A
  ___CA2A
  L_end___CA2AW
  ___CA2AW
  L_end___CS2S
  ___CS2S
  L_end___FZinS
  ___FZinS
  L_end___CC2D
  ___CC2D
  L_end___CC2DW
  ___CC2DW
  L_end_Swap
  _Swap
  L_fn_cc1101_strob0
  L_fn_cc1101_init1
  L_fn_cc1101_init2
  L_fn_cc1101_init3
  L_fn_cc1101_init4
  L_ManBufAddByte5
  L_ManTransmitData6
  L_ManTransmitData7
  L_ManTransmitData8
  L_ManTransmitData9
  L_ManTransmitData10
  L_ManTransmitData11
  L_ManTransmitData12
  L_ManTransmitData13
  L_ManTransmitData14
  L_ManTransmitData15
  L_ManTransmitByte16
  L_ManTransmitByte17
  L_ManTransmitByte18
  L_ManTransmitByte19
  L_ManTransmitByte20
  L_ManTransmitBit21
  L_ManTransmitBit22
  L_ManPause23
  L_ManCheckSumm24
  L_ManCheckSumm25
  L_ManCheckSumm26
  L_ManCheckSumm27
  L_ManCheckSumm28
  L_interrupt29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L_main35
  L_main36
  L_main37
  L_main38
  L_main39
  L_main40
  L_main41
  L_main42
  L_main43
  L_main44
  L_main45
  L_main46
  L_main47
  L__main48
  L_end_fn_cc1101_strob
  _fn_cc1101_strob
  L_end_fn_cc1101_init
  _fn_cc1101_init
  L_end_ManInit
  _ManInit
  L_end_ManBufAddByte
  _ManBufAddByte
  L_end_ManTransmitData
  _ManTransmitData
  L_end_ManTransmitByte
  _ManTransmitByte
  L_end_ManTransmitBit
  _ManTransmitBit
  L_end_ManPause
  _ManPause
  L_end_ManCheckSumm
  _ManCheckSumm
  L_end_interrupt
  _interrupt
  L__interrupt59
  L__interrupt60
  L__interrupt61
  L_end_main
  _main
