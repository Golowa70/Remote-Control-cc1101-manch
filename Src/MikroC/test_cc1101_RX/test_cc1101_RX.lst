;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 25.07.2015 13:20:47
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2A4F      	GOTO       591
_interrupt:
;test_cc1101_RX.c,279 :: 		void interrupt (void)  {
0x0004	0x0870      	MOVF       R0, 0
0x0005	0x0020      	MOVLB      0
0x0006	0x00A2      	MOVWF      34
0x0007	0x0871      	MOVF       R1, 0
0x0008	0x00A1      	MOVWF      33
0x0009	0x0872      	MOVF       R2, 0
0x000A	0x00A0      	MOVWF      32
;test_cc1101_RX.c,280 :: 		if( PIE3.TMR6IE && PIR3.TMR6IF ) {
0x000B	0x3180      	MOVLP      0
0x000C	0x0021      	MOVLB      1
0x000D	0x1D93      	BTFSS      PIE3, 3
0x000E	0x2830      	GOTO       L_interrupt8
0x000F	0x0020      	MOVLB      0
0x0010	0x1D93      	BTFSS      PIR3, 3
0x0011	0x2830      	GOTO       L_interrupt8
L__interrupt69:
;test_cc1101_RX.c,281 :: 		PIR3.TMR6IF=0;
0x0012	0x1193      	BCF        PIR3, 3
;test_cc1101_RX.c,282 :: 		if( timeOffOut_counter <0)
0x0013	0x3080      	MOVLW      128
0x0014	0x066C      	XORWF      _timeOffOut_counter+1, 0
0x0015	0x00F0      	MOVWF      R0
0x0016	0x3080      	MOVLW      128
0x0017	0x0270      	SUBWF      R0, 0
0x0018	0x1D03      	BTFSS      STATUS, 2
0x0019	0x281C      	GOTO       L__interrupt77
0x001A	0x3000      	MOVLW      0
0x001B	0x026B      	SUBWF      _timeOffOut_counter, 0
L__interrupt77:
0x001C	0x1803      	BTFSC      STATUS, 0
0x001D	0x2821      	GOTO       L_interrupt9
;test_cc1101_RX.c,283 :: 		timeOffOut_counter++;
0x001E	0x0AEB      	INCF       _timeOffOut_counter, 1
0x001F	0x1903      	BTFSC      STATUS, 2
0x0020	0x0AEC      	INCF       _timeOffOut_counter+1, 1
L_interrupt9:
;test_cc1101_RX.c,284 :: 		if(timeOffDevice_counter <0)
0x0021	0x3080      	MOVLW      128
0x0022	0x066E      	XORWF      _timeOffDevice_counter+1, 0
0x0023	0x00F0      	MOVWF      R0
0x0024	0x3080      	MOVLW      128
0x0025	0x0270      	SUBWF      R0, 0
0x0026	0x1D03      	BTFSS      STATUS, 2
0x0027	0x282A      	GOTO       L__interrupt78
0x0028	0x3000      	MOVLW      0
0x0029	0x026D      	SUBWF      _timeOffDevice_counter, 0
L__interrupt78:
0x002A	0x1803      	BTFSC      STATUS, 0
0x002B	0x282F      	GOTO       L_interrupt10
;test_cc1101_RX.c,285 :: 		timeOffDevice_counter++;
0x002C	0x0AED      	INCF       _timeOffDevice_counter, 1
0x002D	0x1903      	BTFSC      STATUS, 2
0x002E	0x0AEE      	INCF       _timeOffDevice_counter+1, 1
L_interrupt10:
;test_cc1101_RX.c,287 :: 		asm {clrwdt};                                    //сброс собаки
0x002F	0x0064      	CLRWDT
;test_cc1101_RX.c,288 :: 		}
L_interrupt8:
;test_cc1101_RX.c,293 :: 		if (INTCON.T0IF && INTCON.T0IE)
0x0030	0x1D0B      	BTFSS      INTCON, 2
0x0031	0x2845      	GOTO       L_interrupt13
0x0032	0x1E8B      	BTFSS      INTCON, 5
0x0033	0x2845      	GOTO       L_interrupt13
L__interrupt68:
;test_cc1101_RX.c,296 :: 		INTCON.T0IF=0;                                              //сбросить флаг переполнения таймера
0x0034	0x110B      	BCF        INTCON, 2
;test_cc1101_RX.c,297 :: 		if (INTCON.IOCIE==1)                                        //если ожидали внеш прерывания от IOC -
0x0035	0x1D8B      	BTFSS      INTCON, 3
0x0036	0x283A      	GOTO       L_interrupt14
;test_cc1101_RX.c,298 :: 		ManFlags |= bTIM0_OVF;                              // - отметить переполнение
0x0037	0x0020      	MOVLB      0
0x0038	0x14E0      	BSF        _ManFlags, 1
0x0039	0x2845      	GOTO       L_interrupt15
L_interrupt14:
0x003A	0x0020      	MOVLB      0
;test_cc1101_RX.c,302 :: 		if (MAN_IN_PIN & MAN_IN_LINE)    {
0x003B	0x1E0C      	BTFSS      PORTA, 4
0x003C	0x283F      	GOTO       L_interrupt16
;test_cc1101_RX.c,303 :: 		ManFlags |= bLINE_VAL;
0x003D	0x1560      	BSF        _ManFlags, 2
;test_cc1101_RX.c,304 :: 		}
0x003E	0x2840      	GOTO       L_interrupt17
L_interrupt16:
;test_cc1101_RX.c,307 :: 		ManFlags &= ~bLINE_VAL;
0x003F	0x1160      	BCF        _ManFlags, 2
;test_cc1101_RX.c,308 :: 		}
L_interrupt17:
;test_cc1101_RX.c,310 :: 		INTCON.IOCIE=1;                                        //включить внешние прерывания от IOC
0x0040	0x158B      	BSF        INTCON, 3
;test_cc1101_RX.c,311 :: 		INTCON.IOCIF=0;                                        //сбросить возможно проскочившее прерывание
0x0041	0x100B      	BCF        INTCON, 0
;test_cc1101_RX.c,312 :: 		IOCAF.IOCAF4=0;                                        //--''--
0x0042	0x0027      	MOVLB      7
0x0043	0x1213      	BCF        IOCAF, 4
;test_cc1101_RX.c,314 :: 		asm {clrwdt};                                    //сброс собаки
0x0044	0x0064      	CLRWDT
;test_cc1101_RX.c,315 :: 		}
L_interrupt15:
;test_cc1101_RX.c,317 :: 		}
L_interrupt13:
;test_cc1101_RX.c,321 :: 		if (INTCON.IOCIE && INTCON.IOCIF && IOCAF.IOCAF4)
0x0045	0x1D8B      	BTFSS      INTCON, 3
0x0046	0x28E0      	GOTO       L_interrupt20
0x0047	0x1C0B      	BTFSS      INTCON, 0
0x0048	0x28E0      	GOTO       L_interrupt20
0x0049	0x0027      	MOVLB      7
0x004A	0x1E13      	BTFSS      IOCAF, 4
0x004B	0x28E0      	GOTO       L_interrupt20
L__interrupt67:
;test_cc1101_RX.c,325 :: 		TimerVal = TMR0;
0x004C	0x0020      	MOVLB      0
0x004D	0x0815      	MOVF       TMR0, 0
0x004E	0x00E6      	MOVWF      _TimerVal
;test_cc1101_RX.c,326 :: 		TMR0 = 255 - ((MAN_PERIOD_LEN )* 3 / 4);               //счетчик таймера настроить на 3/4 длины периода MANCHESTER бита данных
0x004F	0x30D1      	MOVLW      209
0x0050	0x0095      	MOVWF      TMR0
;test_cc1101_RX.c,327 :: 		INTCON.IOCIE=0;                                        //выключить внешнее прерывание
0x0051	0x118B      	BCF        INTCON, 3
;test_cc1101_RX.c,328 :: 		INTCON.IOCIF=0;                                        //на случай ВЧ сигнала сбросить возможно проскочившее повторное прерывание
0x0052	0x100B      	BCF        INTCON, 0
;test_cc1101_RX.c,329 :: 		IOCAF.IOCAF4=0;
0x0053	0x0027      	MOVLB      7
0x0054	0x1213      	BCF        IOCAF, 4
;test_cc1101_RX.c,332 :: 		if ( (TimerVal > (MAN_PERIOD_LEN/2)) || (ManFlags & bTIM0_OVF))
0x0055	0x0020      	MOVLB      0
0x0056	0x0866      	MOVF       _TimerVal, 0
0x0057	0x3C1F      	SUBLW      31
0x0058	0x1C03      	BTFSS      STATUS, 0
0x0059	0x285D      	GOTO       L__interrupt66
0x005A	0x18E0      	BTFSC      _ManFlags, 1
0x005B	0x285D      	GOTO       L__interrupt66
0x005C	0x2862      	GOTO       L_interrupt23
L__interrupt66:
;test_cc1101_RX.c,335 :: 		Ini :
___interrupt_Ini:
;test_cc1101_RX.c,336 :: 		asm {clrwdt};                                    //сброс собаки
0x005D	0x0064      	CLRWDT
;test_cc1101_RX.c,338 :: 		ManFlags &= ~(bTIM0_OVF);                       //сбросить флаг переполнения
0x005E	0x10E0      	BCF        _ManFlags, 1
;test_cc1101_RX.c,339 :: 		ManFlags |= bHEADER_RCV;                        //ожидать прием заголовка
0x005F	0x15E0      	BSF        _ManFlags, 3
;test_cc1101_RX.c,340 :: 		ByteCounter = 0;                                //начать прием с начала
0x0060	0x01E1      	CLRF       _ByteCounter
;test_cc1101_RX.c,341 :: 		ByteIn = 0x00;                                  //очистить байт приемник
0x0061	0x01E5      	CLRF       _ByteIn
;test_cc1101_RX.c,343 :: 		}
L_interrupt23:
;test_cc1101_RX.c,346 :: 		ByteIn <<= 1;                                           //сдвигаем байт перед записью бита
0x0062	0x35E5      	LSLF       _ByteIn, 1
;test_cc1101_RX.c,348 :: 		if (! (ManFlags & bLINE_VAL))   {
0x0063	0x1960      	BTFSC      _ManFlags, 2
0x0064	0x2866      	GOTO       L_interrupt24
;test_cc1101_RX.c,349 :: 		ByteIn |= 1;
0x0065	0x1465      	BSF        _ByteIn, 0
;test_cc1101_RX.c,350 :: 		}
L_interrupt24:
;test_cc1101_RX.c,354 :: 		if (ManFlags & bHEADER_RCV)
0x0066	0x1DE0      	BTFSS      _ManFlags, 3
0x0067	0x28B7      	GOTO       L_interrupt25
;test_cc1101_RX.c,357 :: 		if (ByteCounter == 0)
0x0068	0x0861      	MOVF       _ByteCounter, 0
0x0069	0x3A00      	XORLW      0
0x006A	0x1D03      	BTFSS      STATUS, 2
0x006B	0x2881      	GOTO       L_interrupt26
;test_cc1101_RX.c,359 :: 		Invert = ~ManIdentifier [0];
0x006C	0x0923      	COMF       _ManIdentifier, 0
0x006D	0x00E7      	MOVWF      _Invert
;test_cc1101_RX.c,361 :: 		if (ByteIn != ManIdentifier [0]) {                            //?????? я добавил скобки
0x006E	0x0865      	MOVF       _ByteIn, 0
0x006F	0x0623      	XORWF      _ManIdentifier, 0
0x0070	0x1903      	BTFSC      STATUS, 2
0x0071	0x2877      	GOTO       L_interrupt27
;test_cc1101_RX.c,363 :: 		if (ByteIn != Invert)
0x0072	0x0865      	MOVF       _ByteIn, 0
0x0073	0x0667      	XORWF      _Invert, 0
0x0074	0x1903      	BTFSC      STATUS, 2
0x0075	0x2877      	GOTO       L_interrupt28
;test_cc1101_RX.c,365 :: 		return;                                        //пока нет совпадения - выход
0x0076	0x28E0      	GOTO       L__interrupt76
L_interrupt28:
;test_cc1101_RX.c,366 :: 		}
L_interrupt27:
;test_cc1101_RX.c,367 :: 		if (ByteIn == ManIdentifier [0]) {
0x0077	0x0865      	MOVF       _ByteIn, 0
0x0078	0x0623      	XORWF      _ManIdentifier, 0
0x0079	0x1D03      	BTFSS      STATUS, 2
0x007A	0x287D      	GOTO       L_interrupt29
;test_cc1101_RX.c,368 :: 		ManFlags &= ~bLINE_INV;                //прямое совпадение
0x007B	0x1260      	BCF        _ManFlags, 4
;test_cc1101_RX.c,370 :: 		}
0x007C	0x287E      	GOTO       L_interrupt30
L_interrupt29:
;test_cc1101_RX.c,373 :: 		ManFlags |= bLINE_INV;                //инверсное совпадение
0x007D	0x1660      	BSF        _ManFlags, 4
;test_cc1101_RX.c,374 :: 		}
L_interrupt30:
;test_cc1101_RX.c,375 :: 		BitCounter = 0;                                        //готовимся к приему следующих байтов хедера
0x007E	0x01E3      	CLRF       _BitCounter
;test_cc1101_RX.c,376 :: 		ByteCounter++;
0x007F	0x0AE1      	INCF       _ByteCounter, 1
;test_cc1101_RX.c,377 :: 		return;
0x0080	0x28E0      	GOTO       L__interrupt76
;test_cc1101_RX.c,378 :: 		}
L_interrupt26:
;test_cc1101_RX.c,380 :: 		asm {clrwdt};                                    //сброс собаки
0x0081	0x0064      	CLRWDT
;test_cc1101_RX.c,382 :: 		if (++BitCounter < 8)                                //ждем заполнения байта
0x0082	0x0AE3      	INCF       _BitCounter, 1
0x0083	0x3008      	MOVLW      8
0x0084	0x0263      	SUBWF      _BitCounter, 0
0x0085	0x1803      	BTFSC      STATUS, 0
0x0086	0x2888      	GOTO       L_interrupt31
;test_cc1101_RX.c,383 :: 		return;
0x0087	0x28E0      	GOTO       L__interrupt76
L_interrupt31:
;test_cc1101_RX.c,385 :: 		if (ManFlags & bLINE_INV)                        //если сигнал инверсный
0x0088	0x1E60      	BTFSS      _ManFlags, 4
0x0089	0x288B      	GOTO       L_interrupt32
;test_cc1101_RX.c,386 :: 		ByteIn = ~ByteIn;
0x008A	0x09E5      	COMF       _ByteIn, 1
L_interrupt32:
;test_cc1101_RX.c,388 :: 		if (ManIdentifier [ByteCounter])        //если хедер еще не закончен
0x008B	0x3023      	MOVLW      _ManIdentifier
0x008C	0x0084      	MOVWF      FSR0
0x008D	0x3000      	MOVLW      hi_addr(_ManIdentifier)
0x008E	0x0085      	MOVWF      FSR0H
0x008F	0x0861      	MOVF       _ByteCounter, 0
0x0090	0x0784      	ADDWF      FSR0, 1
0x0091	0x1803      	BTFSC      STATUS, 0
0x0092	0x0A85      	INCF       FSR0H, 1
0x0093	0x0800      	MOVF       INDF0, 0
0x0094	0x1903      	BTFSC      STATUS, 2
0x0095	0x28A6      	GOTO       L_interrupt33
;test_cc1101_RX.c,390 :: 		if (ByteIn != ManIdentifier [ByteCounter]){             //проверяем идентичность хедера
0x0096	0x3023      	MOVLW      _ManIdentifier
0x0097	0x0084      	MOVWF      FSR0
0x0098	0x3000      	MOVLW      hi_addr(_ManIdentifier)
0x0099	0x0085      	MOVWF      FSR0H
0x009A	0x0861      	MOVF       _ByteCounter, 0
0x009B	0x0784      	ADDWF      FSR0, 1
0x009C	0x1803      	BTFSC      STATUS, 0
0x009D	0x0A85      	INCF       FSR0H, 1
0x009E	0x0865      	MOVF       _ByteIn, 0
0x009F	0x0600      	XORWF      INDF0, 0
0x00A0	0x1903      	BTFSC      STATUS, 2
0x00A1	0x28A3      	GOTO       L_interrupt34
;test_cc1101_RX.c,391 :: 		goto Ini;                                        //байт не соответствует хедеру - рестарт
0x00A2	0x285D      	GOTO       ___interrupt_Ini
;test_cc1101_RX.c,392 :: 		}
L_interrupt34:
;test_cc1101_RX.c,393 :: 		BitCounter = 0;
0x00A3	0x01E3      	CLRF       _BitCounter
;test_cc1101_RX.c,394 :: 		ByteCounter++;                                         //ожидаем следующий байт хедера
0x00A4	0x0AE1      	INCF       _ByteCounter, 1
;test_cc1101_RX.c,395 :: 		return;
0x00A5	0x28E0      	GOTO       L__interrupt76
;test_cc1101_RX.c,396 :: 		}
L_interrupt33:
;test_cc1101_RX.c,399 :: 		if (ByteIn > MAN_BUF_LENGTH)  {
0x00A6	0x0865      	MOVF       _ByteIn, 0
0x00A7	0x3C10      	SUBLW      16
0x00A8	0x1803      	BTFSC      STATUS, 0
0x00A9	0x28AB      	GOTO       L_interrupt35
;test_cc1101_RX.c,401 :: 		goto Ini;                                             //размер блока данных превышает допустимый - рестарт
0x00AA	0x285D      	GOTO       ___interrupt_Ini
;test_cc1101_RX.c,403 :: 		}
L_interrupt35:
;test_cc1101_RX.c,405 :: 		DataLength = ByteIn;                                        //запомним длину пакета
0x00AB	0x0865      	MOVF       _ByteIn, 0
0x00AC	0x00E2      	MOVWF      _DataLength
;test_cc1101_RX.c,407 :: 		CheckSummByte = 0;                                         //очистить байт контрольной суммы
0x00AD	0x01E4      	CLRF       _CheckSummByte
;test_cc1101_RX.c,408 :: 		CheckSumm (ByteIn);                                        //подсчет контрольки, начиная с байта длины пакета
0x00AE	0x0865      	MOVF       _ByteIn, 0
0x00AF	0x0021      	MOVLB      1
0x00B0	0x00B9      	MOVWF      FARG_CheckSumm_dataa
0x00B1	0x222D      	CALL       _CheckSumm
;test_cc1101_RX.c,410 :: 		ManFlags &= ~bHEADER_RCV;                                 //переходим к приему основного файла
0x00B2	0x0020      	MOVLB      0
0x00B3	0x11E0      	BCF        _ManFlags, 3
;test_cc1101_RX.c,411 :: 		BitCounter = 0;
0x00B4	0x01E3      	CLRF       _BitCounter
;test_cc1101_RX.c,412 :: 		ByteCounter = 0;
0x00B5	0x01E1      	CLRF       _ByteCounter
;test_cc1101_RX.c,413 :: 		return;
0x00B6	0x28E0      	GOTO       L__interrupt76
;test_cc1101_RX.c,414 :: 		}
L_interrupt25:
;test_cc1101_RX.c,415 :: 		asm {clrwdt};                                    //сброс собаки
0x00B7	0x0064      	CLRWDT
;test_cc1101_RX.c,417 :: 		if (++BitCounter < 8)                                        //ждем накопления байта
0x00B8	0x0AE3      	INCF       _BitCounter, 1
0x00B9	0x3008      	MOVLW      8
0x00BA	0x0263      	SUBWF      _BitCounter, 0
0x00BB	0x1803      	BTFSC      STATUS, 0
0x00BC	0x28BE      	GOTO       L_interrupt36
;test_cc1101_RX.c,418 :: 		return;
0x00BD	0x28E0      	GOTO       L__interrupt76
L_interrupt36:
;test_cc1101_RX.c,419 :: 		BitCounter = 0;
0x00BE	0x01E3      	CLRF       _BitCounter
;test_cc1101_RX.c,421 :: 		if (ManFlags & bLINE_INV)                                   //необходима ли инверсия
0x00BF	0x1E60      	BTFSS      _ManFlags, 4
0x00C0	0x28C2      	GOTO       L_interrupt37
;test_cc1101_RX.c,422 :: 		ByteIn = ~ByteIn;
0x00C1	0x09E5      	COMF       _ByteIn, 1
L_interrupt37:
;test_cc1101_RX.c,424 :: 		CheckSumm (ByteIn);                                         //подсчет контрольки
0x00C2	0x0865      	MOVF       _ByteIn, 0
0x00C3	0x0021      	MOVLB      1
0x00C4	0x00B9      	MOVWF      FARG_CheckSumm_dataa
0x00C5	0x222D      	CALL       _CheckSumm
;test_cc1101_RX.c,426 :: 		if (DataLength--) {                                         //если это еще байты пакета -
0x00C6	0x0020      	MOVLB      0
0x00C7	0x0862      	MOVF       _DataLength, 0
0x00C8	0x00F0      	MOVWF      R0
0x00C9	0x03E2      	DECF       _DataLength, 1
0x00CA	0x0870      	MOVF       R0, 0
0x00CB	0x1903      	BTFSC      STATUS, 2
0x00CC	0x28D9      	GOTO       L_interrupt38
;test_cc1101_RX.c,427 :: 		ManBuffer [ByteCounter++] = ByteIn;                   // - сохраняем принятый байт
0x00CD	0x30A0      	MOVLW      _ManBuffer
0x00CE	0x0086      	MOVWF      FSR1
0x00CF	0x3000      	MOVLW      hi_addr(_ManBuffer)
0x00D0	0x0087      	MOVWF      FSR1H
0x00D1	0x0861      	MOVF       _ByteCounter, 0
0x00D2	0x0786      	ADDWF      FSR1, 1
0x00D3	0x1803      	BTFSC      STATUS, 0
0x00D4	0x0A87      	INCF       FSR1H, 1
0x00D5	0x0865      	MOVF       _ByteIn, 0
0x00D6	0x0081      	MOVWF      INDF1
0x00D7	0x0AE1      	INCF       _ByteCounter, 1
;test_cc1101_RX.c,428 :: 		}
0x00D8	0x28DF      	GOTO       L_interrupt39
L_interrupt38:
;test_cc1101_RX.c,432 :: 		if (CheckSummByte) {                              //если контролька не верна (не 0) -
0x00D9	0x0864      	MOVF       _CheckSummByte, 0
0x00DA	0x1903      	BTFSC      STATUS, 2
0x00DB	0x28DD      	GOTO       L_interrupt40
;test_cc1101_RX.c,433 :: 		goto Ini;                                   // - рестарт
0x00DC	0x285D      	GOTO       ___interrupt_Ini
;test_cc1101_RX.c,434 :: 		}
L_interrupt40:
;test_cc1101_RX.c,437 :: 		ManFlags |= bDATA_ENBL;                          //установить флаг наличия данных
0x00DD	0x1460      	BSF        _ManFlags, 0
;test_cc1101_RX.c,438 :: 		ManReceiveStop ();                               //тормозим дальнейший прием
0x00DE	0x21CD      	CALL       _ManReceiveStop
;test_cc1101_RX.c,439 :: 		}
L_interrupt39:
;test_cc1101_RX.c,442 :: 		asm {clrwdt};                                    //сброс собаки
0x00DF	0x0064      	CLRWDT
;test_cc1101_RX.c,443 :: 		}
L_interrupt20:
;test_cc1101_RX.c,444 :: 		}
L_end_interrupt:
L__interrupt76:
0x00E0	0x0020      	MOVLB      0
0x00E1	0x0822      	MOVF       34, 0
0x00E2	0x00F0      	MOVWF      R0
0x00E3	0x0821      	MOVF       33, 0
0x00E4	0x00F1      	MOVWF      R1
0x00E5	0x0820      	MOVF       32, 0
0x00E6	0x00F2      	MOVWF      R2
0x00E7	0x0009      	RETFIE     %s
; end of _interrupt
_Delay_22us:
;__Lib_Delays.c,15 :: 		void Delay_22us() {
;__Lib_Delays.c,16 :: 		Delay_us(22);
0x00E8	0x301D      	MOVLW      29
0x00E9	0x00FD      	MOVWF      R13
L_Delay_22us1:
0x00EA	0x0BFD      	DECFSZ     R13, 1
0x00EB	0x28EA      	GOTO       L_Delay_22us1
;__Lib_Delays.c,17 :: 		}
L_end_Delay_22us:
0x00EC	0x0008      	RETURN
; end of _Delay_22us
_Delay_1us:
;__Lib_Delays.c,7 :: 		void Delay_1us() {
;__Lib_Delays.c,8 :: 		Delay_us(1);
0x00ED	0x0000      	NOP
0x00EE	0x0000      	NOP
0x00EF	0x0000      	NOP
0x00F0	0x0000      	NOP
;__Lib_Delays.c,9 :: 		}
L_end_Delay_1us:
0x00F1	0x0008      	RETURN
; end of _Delay_1us
_Soft_SPI_Write:
;__Lib_SoftSPI.c,21 :: 		
;__Lib_SoftSPI.c,22 :: 		
0x00F2	0x3080      	MOVLW      128
0x00F3	0x0021      	MOVLB      1
0x00F4	0x00B8      	MOVWF      Soft_SPI_Write_i_L0
;__Lib_SoftSPI.c,24 :: 		
0x00F5	0x09B7      	COMF       FARG_Soft_SPI_Write_sdata, 1
;__Lib_SoftSPI.c,25 :: 		
L_Soft_SPI_Write0:
0x00F6	0x0838      	MOVF       Soft_SPI_Write_i_L0, 0
0x00F7	0x1903      	BTFSC      STATUS, 2
0x00F8	0x2911      	GOTO       L_Soft_SPI_Write1
;__Lib_SoftSPI.c,26 :: 		
0x00F9	0x0838      	MOVF       Soft_SPI_Write_i_L0, 0
0x00FA	0x0537      	ANDWF      FARG_Soft_SPI_Write_sdata, 0
0x00FB	0x00F1      	MOVWF      R1
0x00FC	0x0871      	MOVF       R1, 0
0x00FD	0x3001      	MOVLW      1
0x00FE	0x1D03      	BTFSS      STATUS, 2
0x00FF	0x3000      	MOVLW      0
0x0100	0x00F0      	MOVWF      R0
0x0101	0x1870      	BTFSC      R0, 0
0x0102	0x2906      	GOTO       L__Soft_SPI_Write7
0x0103	0x0020      	MOVLB      0
0x0104	0x110C      	BCF        SoftSpi_SDO, BitPos(SoftSpi_SDO+0)
0x0105	0x2908      	GOTO       L__Soft_SPI_Write8
L__Soft_SPI_Write7:
0x0106	0x0020      	MOVLB      0
0x0107	0x150C      	BSF        SoftSpi_SDO, BitPos(SoftSpi_SDO+0)
L__Soft_SPI_Write8:
;__Lib_SoftSPI.c,27 :: 		
0x0108	0x20ED      	CALL       _Delay_1us
;__Lib_SoftSPI.c,28 :: 		
0x0109	0x20ED      	CALL       _Delay_1us
;__Lib_SoftSPI.c,29 :: 		
0x010A	0x148C      	BSF        SoftSpi_CLK, BitPos(SoftSpi_CLK+0)
;__Lib_SoftSPI.c,30 :: 		
0x010B	0x20E8      	CALL       _Delay_22us
;__Lib_SoftSPI.c,31 :: 		
0x010C	0x108C      	BCF        SoftSpi_CLK, BitPos(SoftSpi_CLK+0)
;__Lib_SoftSPI.c,32 :: 		
0x010D	0x20E8      	CALL       _Delay_22us
;__Lib_SoftSPI.c,33 :: 		
0x010E	0x0021      	MOVLB      1
0x010F	0x36B8      	LSRF       Soft_SPI_Write_i_L0, 1
;__Lib_SoftSPI.c,34 :: 		
0x0110	0x28F6      	GOTO       L_Soft_SPI_Write0
L_Soft_SPI_Write1:
;__Lib_SoftSPI.c,36 :: 		
L_end_Soft_SPI_Write:
0x0111	0x0008      	RETURN
; end of _Soft_SPI_Write
_Mul_16x16_U:
;__Lib_Math.c,136 :: 		
;__Lib_Math.c,143 :: 		
0x0112	0x0020      	MOVLB      0
;__Lib_Math.c,144 :: 		
0x0113	0x01FB      	CLRF       R11
;__Lib_Math.c,145 :: 		
0x0114	0x01FA      	CLRF       R10
;__Lib_Math.c,146 :: 		
0x0115	0x01F9      	CLRF       R9
;__Lib_Math.c,147 :: 		
0x0116	0x3080      	MOVLW      128
;__Lib_Math.c,148 :: 		
0x0117	0x00F8      	MOVWF      R8
;__Lib_Math.c,149 :: 		
0x0118	0x0CF1      	RRF        R1, 1
;__Lib_Math.c,150 :: 		
0x0119	0x0CF0      	RRF        R0, 1
;__Lib_Math.c,151 :: 		
0x011A	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,152 :: 		
0x011B	0x2925      	GOTO       $+10
;__Lib_Math.c,153 :: 		
0x011C	0x0874      	MOVF       R4, 0
;__Lib_Math.c,154 :: 		
0x011D	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,155 :: 		
0x011E	0x0875      	MOVF       R5, 0
;__Lib_Math.c,156 :: 		
0x011F	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,157 :: 		
0x0120	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,158 :: 		
0x0121	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,159 :: 		
0x0122	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,160 :: 		
0x0123	0x0AFB      	INCF       R11, 1
;__Lib_Math.c,161 :: 		
0x0124	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,162 :: 		
0x0125	0x1FF0      	BTFSS      R0, 7
;__Lib_Math.c,163 :: 		
0x0126	0x292D      	GOTO       $+7
;__Lib_Math.c,164 :: 		
0x0127	0x0874      	MOVF       R4, 0
;__Lib_Math.c,165 :: 		
0x0128	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,166 :: 		
0x0129	0x0875      	MOVF       R5, 0
;__Lib_Math.c,167 :: 		
0x012A	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,168 :: 		
0x012B	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,169 :: 		
0x012C	0x07FB      	ADDWF      R11, 1
;__Lib_Math.c,170 :: 		
0x012D	0x0CFB      	RRF        R11, 1
;__Lib_Math.c,171 :: 		
0x012E	0x0CFA      	RRF        R10, 1
;__Lib_Math.c,172 :: 		
0x012F	0x0CF9      	RRF        R9, 1
;__Lib_Math.c,173 :: 		
0x0130	0x0CF8      	RRF        R8, 1
;__Lib_Math.c,174 :: 		
0x0131	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,175 :: 		
0x0132	0x2918      	GOTO       $-26
;__Lib_Math.c,176 :: 		
0x0133	0x087B      	MOVF       R11, 0
;__Lib_Math.c,177 :: 		
0x0134	0x00F3      	MOVWF      R3
;__Lib_Math.c,178 :: 		
0x0135	0x087A      	MOVF       R10, 0
;__Lib_Math.c,179 :: 		
0x0136	0x00F2      	MOVWF      R2
;__Lib_Math.c,180 :: 		
0x0137	0x0879      	MOVF       R9, 0
;__Lib_Math.c,181 :: 		
0x0138	0x00F1      	MOVWF      R1
;__Lib_Math.c,182 :: 		
0x0139	0x0878      	MOVF       R8, 0
;__Lib_Math.c,183 :: 		
0x013A	0x00F0      	MOVWF      R0
;__Lib_Math.c,186 :: 		
L_end_Mul_16x16_U:
0x013B	0x0008      	RETURN
; end of _Mul_16x16_U
_fn_cc1101_strob:
;test_cc1101_RX.c,122 :: 		void fn_cc1101_strob(unsigned char  strob)
;test_cc1101_RX.c,124 :: 		Chip_Select = 0;
0x013C	0x0020      	MOVLB      0
0x013D	0x120E      	BCF        RC4_bit, BitPos(RC4_bit+0)
;test_cc1101_RX.c,126 :: 		Soft_SPI_Write( strob);
0x013E	0x0021      	MOVLB      1
0x013F	0x0836      	MOVF       FARG_fn_cc1101_strob_strob, 0
0x0140	0x00B7      	MOVWF      FARG_Soft_SPI_Write_sdata
0x0141	0x20F2      	CALL       _Soft_SPI_Write
;test_cc1101_RX.c,127 :: 		delay_ms(1);
0x0142	0x3006      	MOVLW      6
0x0143	0x00FC      	MOVWF      R12
0x0144	0x3030      	MOVLW      48
0x0145	0x00FD      	MOVWF      R13
L_fn_cc1101_strob0:
0x0146	0x0BFD      	DECFSZ     R13, 1
0x0147	0x2946      	GOTO       L_fn_cc1101_strob0
0x0148	0x0BFC      	DECFSZ     R12, 1
0x0149	0x2946      	GOTO       L_fn_cc1101_strob0
0x014A	0x0000      	NOP
;test_cc1101_RX.c,128 :: 		Chip_Select = 1;
0x014B	0x0020      	MOVLB      0
0x014C	0x160E      	BSF        RC4_bit, BitPos(RC4_bit+0)
;test_cc1101_RX.c,130 :: 		}
L_end_fn_cc1101_strob:
0x014D	0x0008      	RETURN
; end of _fn_cc1101_strob
_PWM2_Set_Duty:
;__Lib_PWM_c53a2c1.c,40 :: 		
;__Lib_PWM_c53a2c1.c,44 :: 		
0x014E	0x0020      	MOVLB      0
0x014F	0x081B      	MOVF       PR2, 0
0x0150	0x3E01      	ADDLW      1
0x0151	0x00F0      	MOVWF      R0
0x0152	0x01F1      	CLRF       R1
0x0153	0x3000      	MOVLW      0
0x0154	0x3DF1      	ADDWFC     R1, 1
0x0155	0x0021      	MOVLB      1
0x0156	0x0832      	MOVF       FARG_PWM2_Set_Duty_new_duty, 0
0x0157	0x00F4      	MOVWF      R4
0x0158	0x01F5      	CLRF       R5
0x0159	0x2112      	CALL       _Mul_16x16_U
0x015A	0x3006      	MOVLW      6
0x015B	0x00F2      	MOVWF      R2
0x015C	0x0870      	MOVF       R0, 0
0x015D	0x00F4      	MOVWF      R4
0x015E	0x0871      	MOVF       R1, 0
0x015F	0x00F5      	MOVWF      R5
0x0160	0x0872      	MOVF       R2, 0
L__PWM2_Set_Duty10:
0x0161	0x1903      	BTFSC      STATUS, 2
0x0162	0x2967      	GOTO       L__PWM2_Set_Duty11
0x0163	0x36F5      	LSRF       R5, 1
0x0164	0x0CF4      	RRF        R4, 1
0x0165	0x3EFF      	ADDLW      255
0x0166	0x2961      	GOTO       L__PWM2_Set_Duty10
L__PWM2_Set_Duty11:
;__Lib_PWM_c53a2c1.c,45 :: 		
0x0167	0x3004      	MOVLW      4
0x0168	0x00F1      	MOVWF      R1
0x0169	0x0874      	MOVF       R4, 0
0x016A	0x00F0      	MOVWF      R0
0x016B	0x0871      	MOVF       R1, 0
L__PWM2_Set_Duty12:
0x016C	0x1903      	BTFSC      STATUS, 2
0x016D	0x2971      	GOTO       L__PWM2_Set_Duty13
0x016E	0x35F0      	LSLF       R0, 1
0x016F	0x3EFF      	ADDLW      255
0x0170	0x296C      	GOTO       L__PWM2_Set_Duty12
L__PWM2_Set_Duty13:
0x0171	0x3030      	MOVLW      48
0x0172	0x0570      	ANDWF      R0, 0
0x0173	0x00F3      	MOVWF      R3
;__Lib_PWM_c53a2c1.c,46 :: 		
0x0174	0x0874      	MOVF       R4, 0
0x0175	0x00F0      	MOVWF      R0
0x0176	0x0875      	MOVF       R5, 0
0x0177	0x00F1      	MOVWF      R1
0x0178	0x36F1      	LSRF       R1, 1
0x0179	0x0CF0      	RRF        R0, 1
0x017A	0x36F1      	LSRF       R1, 1
0x017B	0x0CF0      	RRF        R0, 1
0x017C	0x0870      	MOVF       R0, 0
0x017D	0x0025      	MOVLB      5
0x017E	0x0098      	MOVWF      CCPR2L
;__Lib_PWM_c53a2c1.c,47 :: 		
0x017F	0x300F      	MOVLW      15
0x0180	0x059A      	ANDWF      CCP2CON, 1
;__Lib_PWM_c53a2c1.c,48 :: 		
0x0181	0x0873      	MOVF       R3, 0
0x0182	0x049A      	IORWF       CCP2CON, 1
;__Lib_PWM_c53a2c1.c,49 :: 		
L_end_PWM2_Set_Duty:
0x0183	0x0008      	RETURN
; end of _PWM2_Set_Duty
_PWM1_Start:
;__Lib_PWM_c53a2c1.c,20 :: 		
;__Lib_PWM_c53a2c1.c,21 :: 		
0x0184	0x0021      	MOVLB      1
0x0185	0x128E      	BCF        TRISC5_bit, BitPos(TRISC5_bit+0)
;__Lib_PWM_c53a2c1.c,22 :: 		
0x0186	0x0020      	MOVLB      0
0x0187	0x151C      	BSF        T2CON, 2
;__Lib_PWM_c53a2c1.c,23 :: 		
0x0188	0x300C      	MOVLW      12
0x0189	0x0025      	MOVLB      5
0x018A	0x0493      	IORWF       CCP1CON, 1
;__Lib_PWM_c53a2c1.c,24 :: 		
L_end_PWM1_Start:
0x018B	0x0008      	RETURN
; end of _PWM1_Start
_PWM1_Init:
;__Lib_PWM_c53a2c1.c,2 :: 		
;__Lib_PWM_c53a2c1.c,3 :: 		
;__Lib_PWM_c53a2c1.c,4 :: 		
0x018C	0x0025      	MOVLB      5
0x018D	0x0191      	CLRF       CCPR1L
;__Lib_PWM_c53a2c1.c,5 :: 		
0x018E	0x1213      	BCF        CCP1CON, 4
;__Lib_PWM_c53a2c1.c,6 :: 		
0x018F	0x1293      	BCF        CCP1CON, 5
;__Lib_PWM_c53a2c1.c,7 :: 		
L_end_PWM1_Init:
0x0190	0x0008      	RETURN
; end of _PWM1_Init
_fn_cc1101_init:
;test_cc1101_RX.c,135 :: 		void fn_cc1101_init()
;test_cc1101_RX.c,138 :: 		Chip_Select = 0;                // активируем порт, выбираем чип.
0x0191	0x0020      	MOVLB      0
0x0192	0x120E      	BCF        RC4_bit, BitPos(RC4_bit+0)
;test_cc1101_RX.c,142 :: 		for(i=0;i!=58;i++)  // запись 34 регистров из таблицы
0x0193	0x0021      	MOVLB      1
0x0194	0x01B2      	CLRF       fn_cc1101_init_i_L0
L_fn_cc1101_init1:
0x0195	0x0832      	MOVF       fn_cc1101_init_i_L0, 0
0x0196	0x3A3A      	XORLW      58
0x0197	0x1903      	BTFSC      STATUS, 2
0x0198	0x29A6      	GOTO       L_fn_cc1101_init2
;test_cc1101_RX.c,144 :: 		Soft_SPI_Write(rf_settings[i]);       //
0x0199	0x3026      	MOVLW      _rf_settings
0x019A	0x0084      	MOVWF      FSR0
0x019B	0x3000      	MOVLW      hi_addr(_rf_settings)
0x019C	0x0085      	MOVWF      FSR0H
0x019D	0x0832      	MOVF       fn_cc1101_init_i_L0, 0
0x019E	0x0784      	ADDWF      FSR0, 1
0x019F	0x1803      	BTFSC      STATUS, 0
0x01A0	0x0A85      	INCF       FSR0H, 1
0x01A1	0x0800      	MOVF       INDF0, 0
0x01A2	0x00B7      	MOVWF      FARG_Soft_SPI_Write_sdata
0x01A3	0x20F2      	CALL       _Soft_SPI_Write
;test_cc1101_RX.c,142 :: 		for(i=0;i!=58;i++)  // запись 34 регистров из таблицы
0x01A4	0x0AB2      	INCF       fn_cc1101_init_i_L0, 1
;test_cc1101_RX.c,146 :: 		}
0x01A5	0x2995      	GOTO       L_fn_cc1101_init1
L_fn_cc1101_init2:
;test_cc1101_RX.c,150 :: 		Chip_Select = 1;          // отпускаем порт
0x01A6	0x0020      	MOVLB      0
0x01A7	0x160E      	BSF        RC4_bit, BitPos(RC4_bit+0)
;test_cc1101_RX.c,155 :: 		delay_ms(5);
0x01A8	0x301A      	MOVLW      26
0x01A9	0x00FC      	MOVWF      R12
0x01AA	0x30F8      	MOVLW      248
0x01AB	0x00FD      	MOVWF      R13
L_fn_cc1101_init4:
0x01AC	0x0BFD      	DECFSZ     R13, 1
0x01AD	0x29AC      	GOTO       L_fn_cc1101_init4
0x01AE	0x0BFC      	DECFSZ     R12, 1
0x01AF	0x29AC      	GOTO       L_fn_cc1101_init4
0x01B0	0x0000      	NOP
;test_cc1101_RX.c,156 :: 		fn_cc1101_strob (SIDLE);
0x01B1	0x3036      	MOVLW      54
0x01B2	0x0021      	MOVLB      1
0x01B3	0x00B6      	MOVWF      FARG_fn_cc1101_strob_strob
0x01B4	0x213C      	CALL       _fn_cc1101_strob
;test_cc1101_RX.c,157 :: 		return;
;test_cc1101_RX.c,158 :: 		}
L_end_fn_cc1101_init:
0x01B5	0x0008      	RETURN
; end of _fn_cc1101_init
_PWM2_Init:
;__Lib_PWM_c53a2c1.c,33 :: 		
;__Lib_PWM_c53a2c1.c,34 :: 		
;__Lib_PWM_c53a2c1.c,35 :: 		
0x01B6	0x0025      	MOVLB      5
0x01B7	0x0198      	CLRF       CCPR2L
;__Lib_PWM_c53a2c1.c,36 :: 		
0x01B8	0x121A      	BCF        CCP2CON, 4
;__Lib_PWM_c53a2c1.c,37 :: 		
0x01B9	0x129A      	BCF        CCP2CON, 5
;__Lib_PWM_c53a2c1.c,38 :: 		
L_end_PWM2_Init:
0x01BA	0x0008      	RETURN
; end of _PWM2_Init
_Soft_SPI_Init:
;__Lib_SoftSPI.c,11 :: 		
;__Lib_SoftSPI.c,12 :: 		
0x01BB	0x0021      	MOVLB      1
0x01BC	0x140C      	BSF        SoftSpi_SDI_Direction, BitPos(SoftSpi_SDI_Direction+0)
;__Lib_SoftSPI.c,13 :: 		
0x01BD	0x110C      	BCF        SoftSpi_SDO_Direction, BitPos(SoftSpi_SDO_Direction+0)
;__Lib_SoftSPI.c,14 :: 		
0x01BE	0x108C      	BCF        SoftSpi_CLK_Direction, BitPos(SoftSpi_CLK_Direction+0)
;__Lib_SoftSPI.c,16 :: 		
0x01BF	0x0020      	MOVLB      0
0x01C0	0x100C      	BCF        SoftSpi_SDI, BitPos(SoftSpi_SDI+0)
;__Lib_SoftSPI.c,17 :: 		
0x01C1	0x110C      	BCF        SoftSpi_SDO, BitPos(SoftSpi_SDO+0)
;__Lib_SoftSPI.c,18 :: 		
0x01C2	0x108C      	BCF        SoftSpi_CLK, BitPos(SoftSpi_CLK+0)
;__Lib_SoftSPI.c,19 :: 		
L_end_Soft_SPI_Init:
0x01C3	0x0008      	RETURN
; end of _Soft_SPI_Init
___CC2DW:
;__Lib_System.c,71 :: 		
;__Lib_System.c,73 :: 		
_CC2DL_Loop1:
;__Lib_System.c,74 :: 		
0x01C4	0x0012      	MOVIW      FSR0++ 
;__Lib_System.c,75 :: 		
0x01C5	0x001E      	MOVWI      FSR1++ 
;__Lib_System.c,76 :: 		
0x01C6	0x03F0      	DECF       R0, 1
;__Lib_System.c,77 :: 		
0x01C7	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,78 :: 		
0x01C8	0x29C4      	GOTO       _CC2DL_Loop1
;__Lib_System.c,79 :: 		
0x01C9	0x03F1      	DECF       R1, 1
;__Lib_System.c,80 :: 		
0x01CA	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,81 :: 		
0x01CB	0x29C4      	GOTO       _CC2DL_Loop1
;__Lib_System.c,83 :: 		
L_end___CC2DW:
0x01CC	0x0008      	RETURN
; end of ___CC2DW
_ManReceiveStop:
;test_cc1101_RX.c,253 :: 		void ManReceiveStop (void)
;test_cc1101_RX.c,255 :: 		INTCON.GIE=0;
0x01CD	0x138B      	BCF        INTCON, 7
;test_cc1101_RX.c,256 :: 		INTCON.TMR0IE=0;                                  //выключить "прерывание при переполнении Т0"
0x01CE	0x128B      	BCF        INTCON, 5
;test_cc1101_RX.c,257 :: 		INTCON.IOCIE=0;                                   //выключить "внешнее прерывание от IOC"
0x01CF	0x118B      	BCF        INTCON, 3
;test_cc1101_RX.c,258 :: 		INTCON.GIE=1;
0x01D0	0x178B      	BSF        INTCON, 7
;test_cc1101_RX.c,259 :: 		}
L_end_ManReceiveStop:
0x01D1	0x0008      	RETURN
; end of _ManReceiveStop
_ManReceiveStart:
;test_cc1101_RX.c,226 :: 		void ManReceiveStart (void)
;test_cc1101_RX.c,229 :: 		INTCON.GIE=0;                                       //запретить все прерывания
0x01D2	0x138B      	BCF        INTCON, 7
;test_cc1101_RX.c,231 :: 		OPTION_REG=0b10000101;                             //предделитель на 64 (частота счета 16000000/4 / 32 = 125000 Hz = 8 uS)  //64?????????
0x01D3	0x3085      	MOVLW      133
0x01D4	0x0021      	MOVLB      1
0x01D5	0x0095      	MOVWF      OPTION_REG
;test_cc1101_RX.c,232 :: 		INTCON.TMR0IE=1;                                   //прерывание при переполнении
0x01D6	0x168B      	BSF        INTCON, 5
;test_cc1101_RX.c,235 :: 		INTCON.IOCIE=1;                                   //разрешение прерываний по изменению уровня
0x01D7	0x158B      	BSF        INTCON, 3
;test_cc1101_RX.c,236 :: 		IOCAP.IOCAP4=1;                                   //включить прерывание  по фронту от RA5
0x01D8	0x0027      	MOVLB      7
0x01D9	0x1611      	BSF        IOCAP, 4
;test_cc1101_RX.c,237 :: 		IOCAN.IOCAN4=1;                                   //включить прерывание  по спаду от RA5
0x01DA	0x1612      	BSF        IOCAN, 4
;test_cc1101_RX.c,242 :: 		ManFlags &= ~(bTIM0_OVF| bDATA_ENBL);             //очистить флаг наличия данных и флаг переполнения
0x01DB	0x30FC      	MOVLW      252
0x01DC	0x0020      	MOVLB      0
0x01DD	0x05E0      	ANDWF      _ManFlags, 1
;test_cc1101_RX.c,243 :: 		ManFlags |= bHEADER_RCV;                          //включить режим приема заголовка
0x01DE	0x15E0      	BSF        _ManFlags, 3
;test_cc1101_RX.c,244 :: 		ByteCounter = 0;                                  //начать прием с начала
0x01DF	0x01E1      	CLRF       _ByteCounter
;test_cc1101_RX.c,245 :: 		ByteIn = 0x00;                                    //очистить байт приемник
0x01E0	0x01E5      	CLRF       _ByteIn
;test_cc1101_RX.c,247 :: 		INTCON.GIE=1;                                     //разрешить все прерывания
0x01E1	0x178B      	BSF        INTCON, 7
;test_cc1101_RX.c,248 :: 		}
L_end_ManReceiveStart:
0x01E2	0x0008      	RETURN
; end of _ManReceiveStart
_ManRcvDataCheck:
;test_cc1101_RX.c,265 :: 		unsigned char* ManRcvDataCheck (void)
;test_cc1101_RX.c,267 :: 		if (ManFlags & bDATA_ENBL)                             //проверка наличия принятых данных
0x01E3	0x0020      	MOVLB      0
0x01E4	0x1C60      	BTFSS      _ManFlags, 0
0x01E5	0x29EC      	GOTO       L_ManRcvDataCheck5
;test_cc1101_RX.c,269 :: 		ManFlags &= ~bDATA_ENBL;                       //очистить флаг наличия данных
0x01E6	0x1060      	BCF        _ManFlags, 0
;test_cc1101_RX.c,270 :: 		return ManBuffer;                              //при наличии данных - возвращаем указатель на буффер
0x01E7	0x30A0      	MOVLW      _ManBuffer
0x01E8	0x00F0      	MOVWF      R0
0x01E9	0x3000      	MOVLW      hi_addr(_ManBuffer)
0x01EA	0x00F1      	MOVWF      R1
0x01EB	0x29EE      	GOTO       L_end_ManRcvDataCheck
;test_cc1101_RX.c,271 :: 		}
L_ManRcvDataCheck5:
;test_cc1101_RX.c,272 :: 		return 0;                                              //при отсутствии данных - возвращаем 0
0x01EC	0x01F0      	CLRF       R0
0x01ED	0x01F1      	CLRF       R1
;test_cc1101_RX.c,273 :: 		}
L_end_ManRcvDataCheck:
0x01EE	0x0008      	RETURN
; end of _ManRcvDataCheck
_PWM1_Set_Duty:
;__Lib_PWM_c53a2c1.c,9 :: 		
;__Lib_PWM_c53a2c1.c,13 :: 		
0x01EF	0x0020      	MOVLB      0
0x01F0	0x081B      	MOVF       PR2, 0
0x01F1	0x3E01      	ADDLW      1
0x01F2	0x00F0      	MOVWF      R0
0x01F3	0x01F1      	CLRF       R1
0x01F4	0x3000      	MOVLW      0
0x01F5	0x3DF1      	ADDWFC     R1, 1
0x01F6	0x0021      	MOVLB      1
0x01F7	0x0832      	MOVF       FARG_PWM1_Set_Duty_new_duty, 0
0x01F8	0x00F4      	MOVWF      R4
0x01F9	0x01F5      	CLRF       R5
0x01FA	0x2112      	CALL       _Mul_16x16_U
0x01FB	0x3006      	MOVLW      6
0x01FC	0x00F2      	MOVWF      R2
0x01FD	0x0870      	MOVF       R0, 0
0x01FE	0x00F4      	MOVWF      R4
0x01FF	0x0871      	MOVF       R1, 0
0x0200	0x00F5      	MOVWF      R5
0x0201	0x0872      	MOVF       R2, 0
L__PWM1_Set_Duty2:
0x0202	0x1903      	BTFSC      STATUS, 2
0x0203	0x2A08      	GOTO       L__PWM1_Set_Duty3
0x0204	0x36F5      	LSRF       R5, 1
0x0205	0x0CF4      	RRF        R4, 1
0x0206	0x3EFF      	ADDLW      255
0x0207	0x2A02      	GOTO       L__PWM1_Set_Duty2
L__PWM1_Set_Duty3:
;__Lib_PWM_c53a2c1.c,14 :: 		
0x0208	0x3004      	MOVLW      4
0x0209	0x00F1      	MOVWF      R1
0x020A	0x0874      	MOVF       R4, 0
0x020B	0x00F0      	MOVWF      R0
0x020C	0x0871      	MOVF       R1, 0
L__PWM1_Set_Duty4:
0x020D	0x1903      	BTFSC      STATUS, 2
0x020E	0x2A12      	GOTO       L__PWM1_Set_Duty5
0x020F	0x35F0      	LSLF       R0, 1
0x0210	0x3EFF      	ADDLW      255
0x0211	0x2A0D      	GOTO       L__PWM1_Set_Duty4
L__PWM1_Set_Duty5:
0x0212	0x3030      	MOVLW      48
0x0213	0x0570      	ANDWF      R0, 0
0x0214	0x00F3      	MOVWF      R3
;__Lib_PWM_c53a2c1.c,15 :: 		
0x0215	0x0874      	MOVF       R4, 0
0x0216	0x00F0      	MOVWF      R0
0x0217	0x0875      	MOVF       R5, 0
0x0218	0x00F1      	MOVWF      R1
0x0219	0x36F1      	LSRF       R1, 1
0x021A	0x0CF0      	RRF        R0, 1
0x021B	0x36F1      	LSRF       R1, 1
0x021C	0x0CF0      	RRF        R0, 1
0x021D	0x0870      	MOVF       R0, 0
0x021E	0x0025      	MOVLB      5
0x021F	0x0091      	MOVWF      CCPR1L
;__Lib_PWM_c53a2c1.c,16 :: 		
0x0220	0x300F      	MOVLW      15
0x0221	0x0593      	ANDWF      CCP1CON, 1
;__Lib_PWM_c53a2c1.c,17 :: 		
0x0222	0x0873      	MOVF       R3, 0
0x0223	0x0493      	IORWF       CCP1CON, 1
;__Lib_PWM_c53a2c1.c,18 :: 		
L_end_PWM1_Set_Duty:
0x0224	0x0008      	RETURN
; end of _PWM1_Set_Duty
_PWM2_Start:
;__Lib_PWM_c53a2c1.c,51 :: 		
;__Lib_PWM_c53a2c1.c,52 :: 		
0x0225	0x0021      	MOVLB      1
0x0226	0x118E      	BCF        TRISC3_bit, BitPos(TRISC3_bit+0)
;__Lib_PWM_c53a2c1.c,53 :: 		
0x0227	0x0020      	MOVLB      0
0x0228	0x151C      	BSF        T2CON, 2
;__Lib_PWM_c53a2c1.c,54 :: 		
0x0229	0x300C      	MOVLW      12
0x022A	0x0025      	MOVLB      5
0x022B	0x049A      	IORWF       CCP2CON, 1
;__Lib_PWM_c53a2c1.c,55 :: 		
L_end_PWM2_Start:
0x022C	0x0008      	RETURN
; end of _PWM2_Start
_CheckSumm:
;test_cc1101_RX.c,452 :: 		void CheckSumm(unsigned char dataa)
;test_cc1101_RX.c,453 :: 		{              unsigned char i=0;
0x022D	0x0021      	MOVLB      1
0x022E	0x01BA      	CLRF       CheckSumm_i_L0
;test_cc1101_RX.c,454 :: 		for ( i=0; i<8; i++)
0x022F	0x01BA      	CLRF       CheckSumm_i_L0
L_CheckSumm41:
0x0230	0x3008      	MOVLW      8
0x0231	0x023A      	SUBWF      CheckSumm_i_L0, 0
0x0232	0x1803      	BTFSC      STATUS, 0
0x0233	0x2A4E      	GOTO       L_CheckSumm42
;test_cc1101_RX.c,456 :: 		unsigned char temp = dataa;
0x0234	0x0839      	MOVF       FARG_CheckSumm_dataa, 0
0x0235	0x00F2      	MOVWF      R2
;test_cc1101_RX.c,457 :: 		temp ^= CheckSummByte;
0x0236	0x0020      	MOVLB      0
0x0237	0x0864      	MOVF       _CheckSummByte, 0
0x0238	0x0021      	MOVLB      1
0x0239	0x0639      	XORWF      FARG_CheckSumm_dataa, 0
0x023A	0x00F1      	MOVWF      R1
0x023B	0x0871      	MOVF       R1, 0
0x023C	0x00F2      	MOVWF      R2
;test_cc1101_RX.c,459 :: 		if (temp & 0x01)        {CheckSummByte ^= 0x18; temp = 0x80;}
0x023D	0x1C71      	BTFSS      R1, 0
0x023E	0x2A45      	GOTO       L_CheckSumm44
0x023F	0x3018      	MOVLW      24
0x0240	0x0020      	MOVLB      0
0x0241	0x06E4      	XORWF      _CheckSummByte, 1
0x0242	0x3080      	MOVLW      128
0x0243	0x00F2      	MOVWF      R2
0x0244	0x2A46      	GOTO       L_CheckSumm45
L_CheckSumm44:
;test_cc1101_RX.c,460 :: 		else                                temp = 0;
0x0245	0x01F2      	CLRF       R2
L_CheckSumm45:
0x0246	0x0020      	MOVLB      0
;test_cc1101_RX.c,462 :: 		CheckSummByte >>= 1;
0x0247	0x36E4      	LSRF       _CheckSummByte, 1
;test_cc1101_RX.c,463 :: 		CheckSummByte |= temp;
0x0248	0x0872      	MOVF       R2, 0
0x0249	0x04E4      	IORWF       _CheckSummByte, 1
;test_cc1101_RX.c,464 :: 		dataa >>= 1;
0x024A	0x0021      	MOVLB      1
0x024B	0x36B9      	LSRF       FARG_CheckSumm_dataa, 1
;test_cc1101_RX.c,454 :: 		for ( i=0; i<8; i++)
0x024C	0x0ABA      	INCF       CheckSumm_i_L0, 1
;test_cc1101_RX.c,465 :: 		}
0x024D	0x2A30      	GOTO       L_CheckSumm41
L_CheckSumm42:
;test_cc1101_RX.c,466 :: 		}
L_end_CheckSumm:
0x024E	0x0008      	RETURN
; end of _CheckSumm
_main:
0x024F	0x2376      	CALL       886
;test_cc1101_RX.c,469 :: 		void main (void){
;test_cc1101_RX.c,471 :: 		OSCCON=0b11111111;                                  //  16 MHz HF
0x0250	0x30FF      	MOVLW      255
0x0251	0x0021      	MOVLB      1
0x0252	0x0099      	MOVWF      OSCCON
;test_cc1101_RX.c,472 :: 		TRISA=0b00010000;
0x0253	0x3010      	MOVLW      16
0x0254	0x008C      	MOVWF      TRISA
;test_cc1101_RX.c,473 :: 		PORTA=0b00000000;
0x0255	0x0020      	MOVLB      0
0x0256	0x018C      	CLRF       PORTA
;test_cc1101_RX.c,474 :: 		TRISC=0b00000000;
0x0257	0x0021      	MOVLB      1
0x0258	0x018E      	CLRF       TRISC
;test_cc1101_RX.c,475 :: 		PORTC=0b00000000;
0x0259	0x0020      	MOVLB      0
0x025A	0x018E      	CLRF       PORTC
;test_cc1101_RX.c,476 :: 		ANSELA  = 0;                                       //выключение АЦП
0x025B	0x0023      	MOVLB      3
0x025C	0x018C      	CLRF       ANSELA
;test_cc1101_RX.c,477 :: 		ANSELC  = 0;
0x025D	0x018E      	CLRF       ANSELC
;test_cc1101_RX.c,478 :: 		CM1CON0=0;                                         //выключение компаратора
0x025E	0x0022      	MOVLB      2
0x025F	0x0191      	CLRF       CM1CON0
;test_cc1101_RX.c,479 :: 		CM2CON0=0;
0x0260	0x0193      	CLRF       CM2CON0
;test_cc1101_RX.c,481 :: 		T6CON=0b11111111;                              //настройка TMR6.Прескалер 64,постскалер 16.
0x0261	0x30FF      	MOVLW      255
0x0262	0x0028      	MOVLB      8
0x0263	0x009E      	MOVWF      T6CON
;test_cc1101_RX.c,482 :: 		PIE3.TMR6IE=1;                                 //разрешение прерываний от TMR6
0x0264	0x0021      	MOVLB      1
0x0265	0x1593      	BSF        PIE3, 3
;test_cc1101_RX.c,484 :: 		asm {clrwdt};                                    //сброс собаки
0x0266	0x0064      	CLRWDT
;test_cc1101_RX.c,486 :: 		PWM1_Init(1500);                                 //частота ШИМ
0x0267	0x0020      	MOVLB      0
0x0268	0x141C      	BSF        T2CON, 0
0x0269	0x149C      	BSF        T2CON, 1
0x026A	0x30A6      	MOVLW      166
0x026B	0x009B      	MOVWF      PR2
0x026C	0x218C      	CALL       _PWM1_Init
;test_cc1101_RX.c,487 :: 		PWM1_Start();
0x026D	0x2184      	CALL       _PWM1_Start
;test_cc1101_RX.c,488 :: 		PWM1_Set_Duty(0);
0x026E	0x0021      	MOVLB      1
0x026F	0x01B2      	CLRF       FARG_PWM1_Set_Duty_new_duty
0x0270	0x21EF      	CALL       _PWM1_Set_Duty
;test_cc1101_RX.c,489 :: 		PWM2_Init(1500);
0x0271	0x0020      	MOVLB      0
0x0272	0x141C      	BSF        T2CON, 0
0x0273	0x149C      	BSF        T2CON, 1
0x0274	0x30A6      	MOVLW      166
0x0275	0x009B      	MOVWF      PR2
0x0276	0x21B6      	CALL       _PWM2_Init
;test_cc1101_RX.c,490 :: 		PWM2_Start();
0x0277	0x2225      	CALL       _PWM2_Start
;test_cc1101_RX.c,491 :: 		PWM2_Set_Duty(0);
0x0278	0x0021      	MOVLB      1
0x0279	0x01B2      	CLRF       FARG_PWM2_Set_Duty_new_duty
0x027A	0x214E      	CALL       _PWM2_Set_Duty
;test_cc1101_RX.c,493 :: 		PWR_RECEIVER =1;                                // включить питание приемника
0x027B	0x0022      	MOVLB      2
0x027C	0x160E      	BSF        LATC, 4
;test_cc1101_RX.c,495 :: 		Soft_SPI_Init();
0x027D	0x21BB      	CALL       _Soft_SPI_Init
;test_cc1101_RX.c,496 :: 		fn_cc1101_init();
0x027E	0x2191      	CALL       _fn_cc1101_init
;test_cc1101_RX.c,497 :: 		fn_cc1101_strob (SRX);
0x027F	0x3034      	MOVLW      52
0x0280	0x0021      	MOVLB      1
0x0281	0x00B6      	MOVWF      FARG_fn_cc1101_strob_strob
0x0282	0x213C      	CALL       _fn_cc1101_strob
;test_cc1101_RX.c,498 :: 		ManReceiveStart ();                             // старт приема данных
0x0283	0x21D2      	CALL       _ManReceiveStart
;test_cc1101_RX.c,499 :: 		timeOffDevice_counter = - 9000;                //таймер полного выключения 9000-10 мин
0x0284	0x30D8      	MOVLW      216
0x0285	0x00ED      	MOVWF      _timeOffDevice_counter
0x0286	0x30DC      	MOVLW      220
0x0287	0x00EE      	MOVWF      _timeOffDevice_counter+1
;test_cc1101_RX.c,501 :: 		while (1)
L_main46:
;test_cc1101_RX.c,505 :: 		unsigned char *pBuf = ManRcvDataCheck();                    //проверка наличия данных
0x0288	0x21E3      	CALL       _ManRcvDataCheck
0x0289	0x0870      	MOVF       R0, 0
0x028A	0x0021      	MOVLB      1
0x028B	0x00B0      	MOVWF      main_pBuf_L1
0x028C	0x0871      	MOVF       R1, 0
0x028D	0x00B1      	MOVWF      main_pBuf_L1+1
;test_cc1101_RX.c,506 :: 		asm {clrwdt};                                           //сброс собаки
0x028E	0x0064      	CLRWDT
;test_cc1101_RX.c,507 :: 		if (pBuf)                                                   //если указатель не нулевой, значит данные поступили
0x028F	0x0830      	MOVF       main_pBuf_L1, 0
0x0290	0x0431      	IORWF       main_pBuf_L1+1, 0
0x0291	0x1903      	BTFSC      STATUS, 2
0x0292	0x2B02      	GOTO       L_main48
;test_cc1101_RX.c,509 :: 		timeOffDevice_counter = -9000;                      //обновляем таймер выключения
0x0293	0x30D8      	MOVLW      216
0x0294	0x0020      	MOVLB      0
0x0295	0x00ED      	MOVWF      _timeOffDevice_counter
0x0296	0x30DC      	MOVLW      220
0x0297	0x00EE      	MOVWF      _timeOffDevice_counter+1
;test_cc1101_RX.c,510 :: 		codeButtons = *pBuf;                                //копируем первый байт буфера
0x0298	0x0021      	MOVLB      1
0x0299	0x0830      	MOVF       main_pBuf_L1, 0
0x029A	0x0084      	MOVWF      FSR0
0x029B	0x0831      	MOVF       main_pBuf_L1+1, 0
0x029C	0x0085      	MOVWF      FSR0H
0x029D	0x0800      	MOVF       INDF0, 0
0x029E	0x00F1      	MOVWF      R1
0x029F	0x0871      	MOVF       R1, 0
0x02A0	0x0020      	MOVLB      0
0x02A1	0x00EF      	MOVWF      _codeButtons
;test_cc1101_RX.c,511 :: 		*pBuf++;
0x02A2	0x0021      	MOVLB      1
0x02A3	0x0AB0      	INCF       main_pBuf_L1, 1
0x02A4	0x1903      	BTFSC      STATUS, 2
0x02A5	0x0AB1      	INCF       main_pBuf_L1+1, 1
;test_cc1101_RX.c,512 :: 		speedLevel = *pBuf;
0x02A6	0x0830      	MOVF       main_pBuf_L1, 0
0x02A7	0x0084      	MOVWF      FSR0
0x02A8	0x0831      	MOVF       main_pBuf_L1+1, 0
0x02A9	0x0085      	MOVWF      FSR0H
0x02AA	0x0800      	MOVF       INDF0, 0
0x02AB	0x0020      	MOVLB      0
0x02AC	0x00E9      	MOVWF      _speedLevel
;test_cc1101_RX.c,514 :: 		if(codeButtons & (1<<0))                          //проверяем какая кнопка нажата
0x02AD	0x1C71      	BTFSS      R1, 0
0x02AE	0x2ABF      	GOTO       L_main49
;test_cc1101_RX.c,516 :: 		if( ++ timerStartForward_counter < 5 )  FORWARD(255); //если вперед,при старте ШИМ на 100
0x02AF	0x0AE8      	INCF       _timerStartForward_counter, 1
0x02B0	0x3005      	MOVLW      5
0x02B1	0x0268      	SUBWF      _timerStartForward_counter, 0
0x02B2	0x1803      	BTFSC      STATUS, 0
0x02B3	0x2AB9      	GOTO       L_main50
0x02B4	0x30FF      	MOVLW      255
0x02B5	0x0021      	MOVLB      1
0x02B6	0x00B2      	MOVWF      FARG_PWM1_Set_Duty_new_duty
0x02B7	0x21EF      	CALL       _PWM1_Set_Duty
0x02B8	0x2ABE      	GOTO       L_main51
L_main50:
;test_cc1101_RX.c,518 :: 		FORWARD(speedLevel);                          //передаем в ШИМ значение скорости
0x02B9	0x0020      	MOVLB      0
0x02BA	0x0869      	MOVF       _speedLevel, 0
0x02BB	0x0021      	MOVLB      1
0x02BC	0x00B2      	MOVWF      FARG_PWM1_Set_Duty_new_duty
0x02BD	0x21EF      	CALL       _PWM1_Set_Duty
L_main51:
;test_cc1101_RX.c,519 :: 		}
0x02BE	0x2AC4      	GOTO       L_main52
L_main49:
;test_cc1101_RX.c,522 :: 		timerStartForward_counter=0;
0x02BF	0x0020      	MOVLB      0
0x02C0	0x01E8      	CLRF       _timerStartForward_counter
;test_cc1101_RX.c,523 :: 		FORWARD(0);
0x02C1	0x0021      	MOVLB      1
0x02C2	0x01B2      	CLRF       FARG_PWM1_Set_Duty_new_duty
0x02C3	0x21EF      	CALL       _PWM1_Set_Duty
;test_cc1101_RX.c,524 :: 		}
L_main52:
;test_cc1101_RX.c,526 :: 		if(codeButtons & (1<<1))                              //если назад,передаем в ШИМ значение скорости
0x02C4	0x0020      	MOVLB      0
0x02C5	0x1CEF      	BTFSS      _codeButtons, 1
0x02C6	0x2AD7      	GOTO       L_main53
;test_cc1101_RX.c,528 :: 		if(++ timerStartReverse_counter<5) REVERSE(255);
0x02C7	0x0AEA      	INCF       _timerStartReverse_counter, 1
0x02C8	0x3005      	MOVLW      5
0x02C9	0x026A      	SUBWF      _timerStartReverse_counter, 0
0x02CA	0x1803      	BTFSC      STATUS, 0
0x02CB	0x2AD1      	GOTO       L_main54
0x02CC	0x30FF      	MOVLW      255
0x02CD	0x0021      	MOVLB      1
0x02CE	0x00B2      	MOVWF      FARG_PWM2_Set_Duty_new_duty
0x02CF	0x214E      	CALL       _PWM2_Set_Duty
0x02D0	0x2AD6      	GOTO       L_main55
L_main54:
;test_cc1101_RX.c,530 :: 		REVERSE (speedlevel);
0x02D1	0x0020      	MOVLB      0
0x02D2	0x0869      	MOVF       _speedLevel, 0
0x02D3	0x0021      	MOVLB      1
0x02D4	0x00B2      	MOVWF      FARG_PWM2_Set_Duty_new_duty
0x02D5	0x214E      	CALL       _PWM2_Set_Duty
L_main55:
;test_cc1101_RX.c,531 :: 		}
0x02D6	0x2ADC      	GOTO       L_main56
L_main53:
;test_cc1101_RX.c,534 :: 		timerStartReverse_counter=0;
0x02D7	0x0020      	MOVLB      0
0x02D8	0x01EA      	CLRF       _timerStartReverse_counter
;test_cc1101_RX.c,535 :: 		REVERSE(0);
0x02D9	0x0021      	MOVLB      1
0x02DA	0x01B2      	CLRF       FARG_PWM2_Set_Duty_new_duty
0x02DB	0x214E      	CALL       _PWM2_Set_Duty
;test_cc1101_RX.c,536 :: 		}
L_main56:
;test_cc1101_RX.c,539 :: 		if(codeButtons & (1<<2)) LEFT =1;                    //в лево
0x02DC	0x0020      	MOVLB      0
0x02DD	0x1D6F      	BTFSS      _codeButtons, 2
0x02DE	0x2AE2      	GOTO       L_main57
0x02DF	0x0022      	MOVLB      2
0x02E0	0x150E      	BSF        LATC, 2
0x02E1	0x2AE4      	GOTO       L_main58
L_main57:
0x02E2	0x0022      	MOVLB      2
;test_cc1101_RX.c,540 :: 		else  LEFT=0;
0x02E3	0x110E      	BCF        LATC, 2
L_main58:
;test_cc1101_RX.c,542 :: 		if(codeButtons & (1<<3)) RIGHT =1;                   //в право
0x02E4	0x0020      	MOVLB      0
0x02E5	0x1DEF      	BTFSS      _codeButtons, 3
0x02E6	0x2AEA      	GOTO       L_main59
0x02E7	0x0022      	MOVLB      2
0x02E8	0x148E      	BSF        LATC, 1
0x02E9	0x2AEC      	GOTO       L_main60
L_main59:
0x02EA	0x0022      	MOVLB      2
;test_cc1101_RX.c,543 :: 		else  RIGHT=0;
0x02EB	0x108E      	BCF        LATC, 1
L_main60:
;test_cc1101_RX.c,545 :: 		if(codeButtons & (1<<4)) TRIGGER =1;                 //включаем свет
0x02EC	0x0020      	MOVLB      0
0x02ED	0x1E6F      	BTFSS      _codeButtons, 4
0x02EE	0x2AF2      	GOTO       L_main61
0x02EF	0x0022      	MOVLB      2
0x02F0	0x140E      	BSF        LATC, 0
0x02F1	0x2AF7      	GOTO       L_main62
L_main61:
;test_cc1101_RX.c,547 :: 		if(codeButtons & (1<<5))
0x02F2	0x0020      	MOVLB      0
0x02F3	0x1EEF      	BTFSS      _codeButtons, 5
0x02F4	0x2AF7      	GOTO       L_main63
;test_cc1101_RX.c,548 :: 		TRIGGER=0;                                      //выключаем свет
0x02F5	0x0022      	MOVLB      2
0x02F6	0x100E      	BCF        LATC, 0
L_main63:
;test_cc1101_RX.c,549 :: 		}
L_main62:
;test_cc1101_RX.c,552 :: 		ManBuffer[1]=0;                                     // обнуляем первый байт буфера данных
0x02F7	0x0021      	MOVLB      1
0x02F8	0x01A1      	CLRF       _ManBuffer+1
;test_cc1101_RX.c,553 :: 		ManBuffer[2]=0;                                     // обнуляем второй байт буфера данных
0x02F9	0x01A2      	CLRF       _ManBuffer+2
;test_cc1101_RX.c,554 :: 		codeButtons=0;                                      // обнуляем переменную кнопок
0x02FA	0x0020      	MOVLB      0
0x02FB	0x01EF      	CLRF       _codeButtons
;test_cc1101_RX.c,555 :: 		speedLevel=0;                                      // обнуляем переменную скорости
0x02FC	0x01E9      	CLRF       _speedLevel
;test_cc1101_RX.c,557 :: 		timeOffOut_counter = -3;                          //запуск таймера выключения выходов 2-160мс,3-240мсек.
0x02FD	0x30FD      	MOVLW      253
0x02FE	0x00EB      	MOVWF      _timeOffOut_counter
0x02FF	0x30FF      	MOVLW      255
0x0300	0x00EC      	MOVWF      _timeOffOut_counter+1
;test_cc1101_RX.c,559 :: 		ManReceiveStart ();                                //перезапуск процесса чтения MANCHESTER данных
0x0301	0x21D2      	CALL       _ManReceiveStart
;test_cc1101_RX.c,562 :: 		}
L_main48:
0x0302	0x0020      	MOVLB      0
;test_cc1101_RX.c,565 :: 		asm {clrwdt};                                    //сброс собаки
0x0303	0x0064      	CLRWDT
;test_cc1101_RX.c,567 :: 		if(timeOffOut_counter>=0)                       //таймер отсчитал
0x0304	0x3080      	MOVLW      128
0x0305	0x066C      	XORWF      _timeOffOut_counter+1, 0
0x0306	0x00F0      	MOVWF      R0
0x0307	0x3080      	MOVLW      128
0x0308	0x0270      	SUBWF      R0, 0
0x0309	0x1D03      	BTFSS      STATUS, 2
0x030A	0x2B0D      	GOTO       L__main81
0x030B	0x3000      	MOVLW      0
0x030C	0x026B      	SUBWF      _timeOffOut_counter, 0
L__main81:
0x030D	0x1C03      	BTFSS      STATUS, 0
0x030E	0x2B1B      	GOTO       L_main64
;test_cc1101_RX.c,569 :: 		FORWARD(0);                              //выключаем выходы
0x030F	0x0021      	MOVLB      1
0x0310	0x01B2      	CLRF       FARG_PWM1_Set_Duty_new_duty
0x0311	0x21EF      	CALL       _PWM1_Set_Duty
;test_cc1101_RX.c,570 :: 		REVERSE(0);
0x0312	0x0021      	MOVLB      1
0x0313	0x01B2      	CLRF       FARG_PWM2_Set_Duty_new_duty
0x0314	0x214E      	CALL       _PWM2_Set_Duty
;test_cc1101_RX.c,571 :: 		LEFT=0;
0x0315	0x0022      	MOVLB      2
0x0316	0x110E      	BCF        LATC, 2
;test_cc1101_RX.c,572 :: 		RIGHT=0;
0x0317	0x108E      	BCF        LATC, 1
;test_cc1101_RX.c,573 :: 		timerStartForward_counter=0;
0x0318	0x0020      	MOVLB      0
0x0319	0x01E8      	CLRF       _timerStartForward_counter
;test_cc1101_RX.c,574 :: 		timerStartReverse_counter=0;
0x031A	0x01EA      	CLRF       _timerStartReverse_counter
;test_cc1101_RX.c,575 :: 		}
L_main64:
;test_cc1101_RX.c,577 :: 		if(timeOffDevice_counter >=0 )
0x031B	0x3080      	MOVLW      128
0x031C	0x066E      	XORWF      _timeOffDevice_counter+1, 0
0x031D	0x00F0      	MOVWF      R0
0x031E	0x3080      	MOVLW      128
0x031F	0x0270      	SUBWF      R0, 0
0x0320	0x1D03      	BTFSS      STATUS, 2
0x0321	0x2B24      	GOTO       L__main82
0x0322	0x3000      	MOVLW      0
0x0323	0x026D      	SUBWF      _timeOffDevice_counter, 0
L__main82:
0x0324	0x1C03      	BTFSS      STATUS, 0
0x0325	0x2B33      	GOTO       L_main65
;test_cc1101_RX.c,579 :: 		TRIGGER=0;                                //выключаем свет
0x0326	0x0022      	MOVLB      2
0x0327	0x100E      	BCF        LATC, 0
;test_cc1101_RX.c,580 :: 		FORWARD(0);                              //выключаем выходы
0x0328	0x0021      	MOVLB      1
0x0329	0x01B2      	CLRF       FARG_PWM1_Set_Duty_new_duty
0x032A	0x21EF      	CALL       _PWM1_Set_Duty
;test_cc1101_RX.c,581 :: 		REVERSE(0);
0x032B	0x0021      	MOVLB      1
0x032C	0x01B2      	CLRF       FARG_PWM2_Set_Duty_new_duty
0x032D	0x214E      	CALL       _PWM2_Set_Duty
;test_cc1101_RX.c,582 :: 		LEFT=0;
0x032E	0x0022      	MOVLB      2
0x032F	0x110E      	BCF        LATC, 2
;test_cc1101_RX.c,583 :: 		RIGHT=0;
0x0330	0x108E      	BCF        LATC, 1
;test_cc1101_RX.c,584 :: 		PWR_RECEIVER =0;                         //выключить питание приемника
0x0331	0x120E      	BCF        LATC, 4
;test_cc1101_RX.c,585 :: 		asm {sleep};                            //всем спать ))
0x0332	0x0063      	SLEEP
;test_cc1101_RX.c,586 :: 		}
L_main65:
;test_cc1101_RX.c,590 :: 		}
0x0333	0x2A88      	GOTO       L_main46
;test_cc1101_RX.c,595 :: 		}
L_end_main:
0x0334	0x2B34      	GOTO       $+0
; end of _main
0x0376	0x3038      	MOVLW      56
0x0377	0x0084      	MOVWF      FSR0
0x0378	0x3083      	MOVLW      131
0x0379	0x0085      	MOVWF      FSR0H
0x037A	0x303D      	MOVLW      61
0x037B	0x00F0      	MOVWF      R0
0x037C	0x3001      	MOVLW      1
0x037D	0x00F1      	MOVWF      R1
0x037E	0x3023      	MOVLW      35
0x037F	0x0086      	MOVWF      FSR1
0x0380	0x3000      	MOVLW      0
0x0381	0x0087      	MOVWF      FSR1H
0x0382	0x21C4      	CALL       452
0x0383	0x0008      	RETURN
;test_cc1101_RX.c,0 :: ?ICS_ManIdentifier
0x0338	0x3473 ;?ICS_ManIdentifier+0
0x0339	0x3468 ;?ICS_ManIdentifier+1
0x033A	0x3400 ;?ICS_ManIdentifier+2
; end of ?ICS_ManIdentifier
;test_cc1101_RX.c,0 :: ?ICS_rf_settings
0x033B	0x3402 ;?ICS_rf_settings+0
0x033C	0x3400 ;?ICS_rf_settings+1
0x033D	0x3400 ;?ICS_rf_settings+2
0x033E	0x340D ;?ICS_rf_settings+3
0x033F	0x3403 ;?ICS_rf_settings+4
0x0340	0x3447 ;?ICS_rf_settings+5
0x0341	0x3408 ;?ICS_rf_settings+6
0x0342	0x3432 ;?ICS_rf_settings+7
0x0343	0x340B ;?ICS_rf_settings+8
0x0344	0x3406 ;?ICS_rf_settings+9
0x0345	0x340C ;?ICS_rf_settings+10
0x0346	0x3400 ;?ICS_rf_settings+11
0x0347	0x340D ;?ICS_rf_settings+12
0x0348	0x3410 ;?ICS_rf_settings+13
0x0349	0x340E ;?ICS_rf_settings+14
0x034A	0x34B0 ;?ICS_rf_settings+15
0x034B	0x340F ;?ICS_rf_settings+16
0x034C	0x3471 ;?ICS_rf_settings+17
0x034D	0x3410 ;?ICS_rf_settings+18
0x034E	0x34A7 ;?ICS_rf_settings+19
0x034F	0x3411 ;?ICS_rf_settings+20
0x0350	0x3432 ;?ICS_rf_settings+21
0x0351	0x3412 ;?ICS_rf_settings+22
0x0352	0x3430 ;?ICS_rf_settings+23
0x0353	0x3413 ;?ICS_rf_settings+24
0x0354	0x3422 ;?ICS_rf_settings+25
0x0355	0x3414 ;?ICS_rf_settings+26
0x0356	0x34F8 ;?ICS_rf_settings+27
0x0357	0x3416 ;?ICS_rf_settings+28
0x0358	0x3407 ;?ICS_rf_settings+29
0x0359	0x3417 ;?ICS_rf_settings+30
0x035A	0x3430 ;?ICS_rf_settings+31
0x035B	0x3418 ;?ICS_rf_settings+32
0x035C	0x3418 ;?ICS_rf_settings+33
0x035D	0x341B ;?ICS_rf_settings+34
0x035E	0x3404 ;?ICS_rf_settings+35
0x035F	0x341C ;?ICS_rf_settings+36
0x0360	0x3400 ;?ICS_rf_settings+37
0x0361	0x341D ;?ICS_rf_settings+38
0x0362	0x3492 ;?ICS_rf_settings+39
0x0363	0x3421 ;?ICS_rf_settings+40
0x0364	0x34B6 ;?ICS_rf_settings+41
0x0365	0x3422 ;?ICS_rf_settings+42
0x0366	0x3411 ;?ICS_rf_settings+43
0x0367	0x3423 ;?ICS_rf_settings+44
0x0368	0x34E9 ;?ICS_rf_settings+45
0x0369	0x3424 ;?ICS_rf_settings+46
0x036A	0x342A ;?ICS_rf_settings+47
0x036B	0x3425 ;?ICS_rf_settings+48
0x036C	0x3400 ;?ICS_rf_settings+49
0x036D	0x3426 ;?ICS_rf_settings+50
0x036E	0x341F ;?ICS_rf_settings+51
0x036F	0x342C ;?ICS_rf_settings+52
0x0370	0x3481 ;?ICS_rf_settings+53
0x0371	0x342D ;?ICS_rf_settings+54
0x0372	0x3435 ;?ICS_rf_settings+55
0x0373	0x342E ;?ICS_rf_settings+56
0x0374	0x3409 ;?ICS_rf_settings+57
; end of ?ICS_rf_settings
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004     [228]    _interrupt
0x00E8       [5]    _Delay_22us
0x00ED       [5]    _Delay_1us
0x00F2      [32]    _Soft_SPI_Write
0x0112      [42]    _Mul_16x16_U
0x013C      [18]    _fn_cc1101_strob
0x014E      [54]    _PWM2_Set_Duty
0x0184       [8]    _PWM1_Start
0x018C       [5]    _PWM1_Init
0x0191      [37]    _fn_cc1101_init
0x01B6       [5]    _PWM2_Init
0x01BB       [9]    _Soft_SPI_Init
0x01C4       [9]    ___CC2DW
0x01CD       [5]    _ManReceiveStop
0x01D2      [17]    _ManReceiveStart
0x01E3      [12]    _ManRcvDataCheck
0x01EF      [54]    _PWM1_Set_Duty
0x0225       [8]    _PWM2_Start
0x022D      [34]    _CheckSumm
0x024F     [229]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF0
0x0001       [1]    INDF1
0x0003       [1]    STATUS
0x0004       [1]    FSR0L
0x0005       [1]    FSR0H
0x0006       [1]    FSR1L
0x0007       [1]    FSR1H
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [0]    SoftSpi_CLK
0x000C       [1]    PORTA
0x000C       [0]    SoftSpi_SDI
0x000C       [0]    RA2_bit
0x000C       [0]    RA0_bit
0x000C       [0]    RA1_bit
0x000C       [0]    SoftSpi_SDO
0x000E       [0]    RC4_bit
0x000E       [1]    PORTC
0x000E       [0]    Chip_Select
0x0013       [1]    PIR3
0x0015       [1]    TMR0
0x001B       [1]    PR2
0x001C       [1]    T2CON
0x0023       [3]    _ManIdentifier
0x0026      [58]    _rf_settings
0x0060       [1]    _ManFlags
0x0061       [1]    _ByteCounter
0x0062       [1]    _DataLength
0x0063       [1]    _BitCounter
0x0064       [1]    _CheckSummByte
0x0065       [1]    _ByteIn
0x0066       [1]    _TimerVal
0x0067       [1]    _Invert
0x0068       [1]    _timerStartForward_counter
0x0069       [1]    _speedLevel
0x006A       [1]    _timerStartReverse_counter
0x006B       [2]    _timeOffOut_counter
0x006D       [2]    _timeOffDevice_counter
0x006F       [1]    _codeButtons
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x008C       [0]    TRISA1_bit
0x008C       [0]    TRISA0_bit
0x008C       [0]    SoftSpi_SDI_Direction
0x008C       [0]    SoftSpi_SDO_Direction
0x008C       [0]    TRISA2_bit
0x008C       [0]    SoftSpi_CLK_Direction
0x008C       [1]    TRISA
0x008E       [0]    TRISC5_bit
0x008E       [1]    TRISC
0x008E       [0]    TRISC3_bit
0x0093       [1]    PIE3
0x0095       [1]    OPTION_REG
0x0099       [1]    OSCCON
0x00A0      [16]    _ManBuffer
0x00B0       [2]    main_pBuf_L1
0x00B2       [1]    FARG_PWM2_Set_Duty_new_duty
0x00B2       [4]    FARG_PWM2_Init_PWM_Freq
0x00B2       [1]    FARG_PWM1_Set_Duty_new_duty
0x00B2       [4]    FARG_PWM1_Init_PWM_Freq
0x00B2       [1]    fn_cc1101_init_i_L0
0x00B6       [1]    FARG_fn_cc1101_strob_strob
0x00B7       [1]    FARG_Soft_SPI_Write_sdata
0x00B8       [1]    Soft_SPI_Write_i_L0
0x00B9       [1]    FARG_CheckSumm_dataa
0x00BA       [1]    CheckSumm_i_L0
0x010E       [1]    LATC
0x0111       [1]    CM1CON0
0x0113       [1]    CM2CON0
0x018C       [1]    ANSELA
0x018E       [1]    ANSELC
0x0291       [1]    CCPR1L
0x0293       [1]    CCP1CON
0x0298       [1]    CCPR2L
0x029A       [1]    CCP2CON
0x0391       [1]    IOCAP
0x0392       [1]    IOCAN
0x0393       [1]    IOCAF
0x041E       [1]    T6CON
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x0338       [3]    ?ICS_ManIdentifier
0x033B      [58]    ?ICS_rf_settings
//** Label List: ** 
//----------------------------------------------
  L_fn_cc1101_strob0
  L_fn_cc1101_init1
  L_fn_cc1101_init2
  L_fn_cc1101_init3
  L_fn_cc1101_init4
  L_ManRcvDataCheck5
  L_interrupt6
  L_interrupt7
  L_interrupt8
  L_interrupt9
  L_interrupt10
  L_interrupt11
  L_interrupt12
  L_interrupt13
  L_interrupt14
  L_interrupt15
  L_interrupt16
  L_interrupt17
  L_interrupt18
  L_interrupt19
  L_interrupt20
  L_interrupt21
  L_interrupt22
  L_interrupt23
  ___interrupt_Ini
  L_interrupt24
  L_interrupt25
  L_interrupt26
  L_interrupt27
  L_interrupt28
  L_interrupt29
  L_interrupt30
  L_interrupt31
  L_interrupt32
  L_interrupt33
  L_interrupt34
  L_interrupt35
  L_interrupt36
  L_interrupt37
  L_interrupt38
  L_interrupt39
  L_interrupt40
  L_CheckSumm41
  L_CheckSumm42
  L_CheckSumm43
  L_CheckSumm44
  L_CheckSumm45
  L_main46
  L_main47
  L_main48
  L_main49
  L_main50
  L_main51
  L_main52
  L_main53
  L_main54
  L_main55
  L_main56
  L_main57
  L_main58
  L_main59
  L_main60
  L_main61
  L_main62
  L_main63
  L_main64
  L_main65
  L__interrupt66
  L__interrupt67
  L__interrupt68
  L__interrupt69
  L_end_fn_cc1101_strob
  _fn_cc1101_strob
  L_end_fn_cc1101_init
  _fn_cc1101_init
  L_end_ManReceiveStart
  _ManReceiveStart
  L_end_ManReceiveStop
  _ManReceiveStop
  L_end_ManRcvDataCheck
  _ManRcvDataCheck
  L_end_interrupt
  _interrupt
  L__interrupt76
  L__interrupt77
  L__interrupt78
  L_end_CheckSumm
  _CheckSumm
  L_end_main
  _main
  L__main81
  L__main82
  L_Delay_10us0
  L_Delay_22us1
  L_Delay_50us2
  L_Delay_80us3
  L_Delay_500us4
  L_Delay_5500us5
  L_Delay_1ms6
  L_Delay_5ms7
  L_Delay_8ms8
  L_Delay_10ms9
  L_Delay_100ms10
  L_Delay_1sec11
  L_boot16_Delay_5ms12
  L_Delay_Cyc13
  L_Delay_Cyc14
  L_VDelay_ms15
  L_VDelay_ms16
  L_VDelay_ms17
  L_VDelay_Advanced_ms18
  L_VDelay_Advanced_ms19
  L_VDelay_Advanced_ms20
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Delay_1us
  _Delay_1us
  L_end_Delay_10us
  _Delay_10us
  L_end_Delay_22us
  _Delay_22us
  L_end_Delay_50us
  _Delay_50us
  L_end_Delay_80us
  _Delay_80us
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_1sec
  _Delay_1sec
  L_end_boot16_Delay_5ms
  _boot16_Delay_5ms
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_VDelay_ms
  _VDelay_ms
  L__VDelay_ms38
  L__VDelay_ms39
  L__VDelay_ms40
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L__VDelay_Advanced_ms42
  L__VDelay_Advanced_ms43
  L__VDelay_Advanced_ms44
  L_Div_16x16_S0
  L_Div_16x16_S1
  LOOPS3232A
  SADD22LA
  SOK22LA
  SADD22L8
  SOK22L8
  LOOPS3232B
  SADD22LB
  SOK22LB
  SADD22L16
  SOK22L16
  LOOPS3232C
  SADD22LC
  SOK22LC
  SADD22L24
  SOK22L24
  LOOPS3232D
  SADD22LD
  SOK22LD
  SOK22L
  L_Div_32x32_S6
  L_Div_32x32_S7
  L_Div_32x32_S8
  L_Div_32x32_S9
  FXD3232S
  END_ALL
  CA3232S
  C3232SX
  C3232SX1
  C3232S
  C3232S2
  C3232SX4
  C3232SOK
  C3232SX3
  C3232SX2
  avoid_comfrem
  LOOPU3232A
  UADD22LA
  UOK22LA
  UADD22L8
  UOK22L8
  LOOPU3232B
  UADD22LB
  UOK22LB
  UADD22L16
  UOK22L16
  LOOPU3232C
  UADD22LC
  UOK22LC
  UADD22L24
  UOK22L24
  LOOPU3232D
  UADD22LD
  UOK22LD
  UOK22L
  _NEXT
  _EXIT2
  _LOOP
  _EXIT1
  _IF_FIRST
  _IF_SECOND
  _INVERCE_FIRST
  _MULT
  _INBERSE_SECOND
  _EXIT
  L_end_Mul_8x8_U
  _Mul_8x8_U
  L_end_Mul_16x16_U
  _Mul_16x16_U
  L_end_Div_8x8_U
  _Div_8x8_U
  L_end_Div_16x16_U
  _Div_16x16_U
  L_end_Mul_8x8_S
  _Mul_8x8_S
  L_end_Mul_16x16_S
  _Mul_16x16_S
  L_end_Div_16x16_S_L
  _Div_16x16_S_L
  L_end_Div_16x16_S
  _Div_16x16_S
  L_end_Div_8x8_S
  _Div_8x8_S
  L_end_SDIV3232L
  _SDIV3232L
  L_end_COMFREM
  _COMFREM
  L_end_Div_32x32_S
  _Div_32x32_S
  L_end_Div_32x32_U
  _Div_32x32_U
  L_end_Mul_32x32_U
  _Mul_32x32_U
  L_end_Mul_32x32_S
  _Mul_32x32_S
  L_end_PWM1_Init
  _PWM1_Init
  L_end_PWM1_Set_Duty
  _PWM1_Set_Duty
  L__PWM1_Set_Duty2
  L__PWM1_Set_Duty3
  L__PWM1_Set_Duty4
  L__PWM1_Set_Duty5
  L_end_PWM1_Start
  _PWM1_Start
  L_end_PWM1_Stop
  _PWM1_Stop
  L_end_PWM2_Init
  _PWM2_Init
  L_end_PWM2_Set_Duty
  _PWM2_Set_Duty
  L__PWM2_Set_Duty10
  L__PWM2_Set_Duty11
  L__PWM2_Set_Duty12
  L__PWM2_Set_Duty13
  L_end_PWM2_Start
  _PWM2_Start
  L_end_PWM2_Stop
  _PWM2_Stop
  L_end_PWM3_Init
  _PWM3_Init
  L_end_PWM3_Set_Duty
  _PWM3_Set_Duty
  L__PWM3_Set_Duty18
  L__PWM3_Set_Duty19
  L__PWM3_Set_Duty20
  L__PWM3_Set_Duty21
  L_end_PWM3_Start
  _PWM3_Start
  L_end_PWM3_Stop
  _PWM3_Stop
  L_end_PWM4_Init
  _PWM4_Init
  L_end_PWM4_Set_Duty
  _PWM4_Set_Duty
  L__PWM4_Set_Duty26
  L__PWM4_Set_Duty27
  L__PWM4_Set_Duty28
  L__PWM4_Set_Duty29
  L_end_PWM4_Start
  _PWM4_Start
  L_end_PWM4_Stop
  _PWM4_Stop
  L_Soft_SPI_Write0
  L_Soft_SPI_Write1
  L_Soft_SPI_Read2
  L_Soft_SPI_Read3
  L_Soft_SPI_Read4
  L_end_Soft_SPI_Init
  _Soft_SPI_Init
  L_end_Soft_SPI_Write
  _Soft_SPI_Write
  L__Soft_SPI_Write7
  L__Soft_SPI_Write8
  L_end_Soft_SPI_Read
  _Soft_SPI_Read
  L__Soft_SPI_Read10
  L__Soft_SPI_Read11
  L_CA2A_Loop
  L_CA2AW_Loop
  L_CS2S_Loop
  L_CS2S_End
  L_FZinS_Loop
  L_FZinS_End
  _CC2D_Loop1
  _CC2DL_Loop1
  L_end_____DoIFC
  _____DoIFC
  L_end___CA2A
  ___CA2A
  L_end___CA2AW
  ___CA2AW
  L_end___CS2S
  ___CS2S
  L_end___FZinS
  ___FZinS
  L_end___CC2D
  ___CC2D
  L_end___CC2DW
  ___CC2DW
  L_end_Swap
  _Swap
  L_fn_cc1101_strob0
  L_fn_cc1101_init1
  L_fn_cc1101_init2
  L_fn_cc1101_init3
  L_fn_cc1101_init4
  L_ManRcvDataCheck5
  L_interrupt6
  L_interrupt7
  L_interrupt8
  L_interrupt9
  L_interrupt10
  L_interrupt11
  L_interrupt12
  L_interrupt13
  L_interrupt14
  L_interrupt15
  L_interrupt16
  L_interrupt17
  L_interrupt18
  L_interrupt19
  L_interrupt20
  L_interrupt21
  L_interrupt22
  L_interrupt23
  ___interrupt_Ini
  L_interrupt24
  L_interrupt25
  L_interrupt26
  L_interrupt27
  L_interrupt28
  L_interrupt29
  L_interrupt30
  L_interrupt31
  L_interrupt32
  L_interrupt33
  L_interrupt34
  L_interrupt35
  L_interrupt36
  L_interrupt37
  L_interrupt38
  L_interrupt39
  L_interrupt40
  L_CheckSumm41
  L_CheckSumm42
  L_CheckSumm43
  L_CheckSumm44
  L_CheckSumm45
  L_main46
  L_main47
  L_main48
  L_main49
  L_main50
  L_main51
  L_main52
  L_main53
  L_main54
  L_main55
  L_main56
  L_main57
  L_main58
  L_main59
  L_main60
  L_main61
  L_main62
  L_main63
  L_main64
  L_main65
  L__interrupt66
  L__interrupt67
  L__interrupt68
  L__interrupt69
  L_end_fn_cc1101_strob
  _fn_cc1101_strob
  L_end_fn_cc1101_init
  _fn_cc1101_init
  L_end_ManReceiveStart
  _ManReceiveStart
  L_end_ManReceiveStop
  _ManReceiveStop
  L_end_ManRcvDataCheck
  _ManRcvDataCheck
  L_end_interrupt
  _interrupt
  L__interrupt76
  L__interrupt77
  L__interrupt78
  L_end_CheckSumm
  _CheckSumm
  L_end_main
  _main
  L__main81
  L__main82
